<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>跛足的登山者</title>
  
  
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://www.liuyong520.cn/"/>
  <updated>2019-05-03T13:16:45.720Z</updated>
  <id>http://www.liuyong520.cn/</id>
  
  <author>
    <name>xxydliuy</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>kafka API的使用</title>
    <link href="http://www.liuyong520.cn/2019/05/02/kafka-API/"/>
    <id>http://www.liuyong520.cn/2019/05/02/kafka-API/</id>
    <published>2019-05-02T13:37:40.000Z</published>
    <updated>2019-05-03T13:16:45.720Z</updated>
    
    <content type="html"><![CDATA[<!-- build time:Fri May 03 2019 21:23:30 GMT+0800 (GMT+08:00) --><h1 id="kafka-API"><a href="#kafka-API" class="headerlink" title="kafka API"></a>kafka API</h1><p>kafka Consumer提供两套Java API：高级Consumer API、和低级Consumer API。</p><p>高级Consumer API 优点：</p><ul><li>高级API写起来简单，易用。<br>不需要自行去管理offset，API已经封装好了offset这块的东西，会通过zookeeper自行管理<br>不需要管理分区，副本等情况，系统自动管理<br>消费者断线后会自动根据上次记录在zookeeper中的offset接着消费消息。</li></ul><p>高级Consumer API 缺点：</p><ul><li>不能自行控制offset。</li><li>不能自行管理分区，副本，zk等相关信息。</li></ul><p>低级API 优点：</p><ul><li>能够让开发者自己维护offset.想从哪里消费就从哪里消费</li><li>自行控制连接分区，对分区自定义负载均衡</li><li>对zookeeper的依赖性降低（如 offset 不一定要用zk来存储，可以存在缓存里或者内存中）</li></ul><p>缺点：<br>过于复杂，需要自行控制offset，连接哪个分区，找分区leader等。</p><h1 id="简单入门使用"><a href="#简单入门使用" class="headerlink" title="简单入门使用"></a>简单入门使用</h1><ol><li><p>引入maven依赖</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">dependency&gt;</span><br><span class="line">    &lt;groupId&gt;org.apache.kafka&lt;/groupId&gt;</span><br><span class="line">    &lt;artifactId&gt;kafka-clients&lt;/artifactId&gt;</span><br><span class="line">    &lt;version&gt;2.2.0&lt;/version&gt;</span><br><span class="line">&lt;/dependency&gt;</span><br></pre></td></tr></table></figure></li><li><p>Producer简单使用</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.sonly.kafka;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.apache.kafka.clients.producer.KafkaProducer;</span><br><span class="line"><span class="keyword">import</span> org.apache.kafka.clients.producer.ProducerConfig;</span><br><span class="line"><span class="keyword">import</span> org.apache.kafka.clients.producer.ProducerRecord;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.Properties;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * &lt;b&gt;package:com.sonly.kafka&lt;/b&gt;</span></span><br><span class="line"><span class="comment"> * &lt;b&gt;project(项目):kafkaAPIdemo&lt;/b&gt;</span></span><br><span class="line"><span class="comment"> * &lt;b&gt;class(类)demo&lt;/b&gt;</span></span><br><span class="line"><span class="comment"> * &lt;b&gt;creat date(创建时间):2019-05-03 12:17&lt;/b&gt;</span></span><br><span class="line"><span class="comment"> * &lt;b&gt;author(作者):&lt;/b&gt;xxydliuyss&lt;/br&gt;</span></span><br><span class="line"><span class="comment"> * &lt;b&gt;note(备注)):&lt;/b&gt;</span></span><br><span class="line"><span class="comment"> * If you want to change the file header,please modify zhe File and Code Templates.</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">demo</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        Properties properties = <span class="keyword">new</span> Properties();</span><br><span class="line">        properties.put(ProducerConfig.BOOTSTRAP_SERVERS_CONFIG,<span class="string">"k8s-n1:9092"</span>);</span><br><span class="line">        properties.put(ProducerConfig.ACKS_CONFIG,<span class="string">"1"</span>);</span><br><span class="line">        properties.put(ProducerConfig.KEY_SERIALIZER_CLASS_CONFIG,<span class="string">"org.apache.kafka.common.serialization.StringSerializer"</span>);</span><br><span class="line">        properties.put(ProducerConfig.VALUE_SERIALIZER_CLASS_CONFIG,<span class="string">"org.apache.kafka.common.serialization.StringSerializer"</span>);</span><br><span class="line">        KafkaProducer&lt;String, String&gt; producer = <span class="keyword">new</span> KafkaProducer&lt;String, String&gt;(properties);</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">100</span>; i++)</span><br><span class="line">            producer.send(<span class="keyword">new</span> ProducerRecord&lt;String, String&gt;(<span class="string">"mytest"</span>, Integer.toString(i), Integer.toString(i)));</span><br><span class="line">        producer.close();</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ol><p>带回调函数的生产者<br></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.sonly.kafka;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.apache.kafka.clients.producer.*;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.Properties;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * &lt;b&gt;package:com.sonly.kafka&lt;/b&gt;</span></span><br><span class="line"><span class="comment"> * &lt;b&gt;project(项目):kafkaAPIdemo&lt;/b&gt;</span></span><br><span class="line"><span class="comment"> * &lt;b&gt;class(类)$&#123;CLASS_NAME&#125;&lt;/b&gt;</span></span><br><span class="line"><span class="comment"> * &lt;b&gt;creat date(创建时间):2019-05-03 12:58&lt;/b&gt;</span></span><br><span class="line"><span class="comment"> * &lt;b&gt;author(作者):&lt;/b&gt;xxydliuyss&lt;/br&gt;</span></span><br><span class="line"><span class="comment"> * &lt;b&gt;note(备注)):&lt;/b&gt;</span></span><br><span class="line"><span class="comment"> * If you want to change the file header,please modify zhe File and Code Templates.</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">demo1</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        Properties properties = <span class="keyword">new</span> Properties();</span><br><span class="line">        <span class="comment">//设置kafka集群</span></span><br><span class="line">        properties.put(ProducerConfig.BOOTSTRAP_SERVERS_CONFIG,<span class="string">"k8s-n1:9092"</span>);</span><br><span class="line">        <span class="comment">//设置brokeACK应答机制</span></span><br><span class="line">        properties.put(ProducerConfig.ACKS_CONFIG,<span class="string">"1"</span>);</span><br><span class="line">        <span class="comment">//设置key序列化</span></span><br><span class="line">        properties.put(ProducerConfig.KEY_SERIALIZER_CLASS_CONFIG,<span class="string">"org.apache.kafka.common.serialization.StringSerializer"</span>);</span><br><span class="line">        <span class="comment">//设置value序列化</span></span><br><span class="line">        properties.put(ProducerConfig.VALUE_SERIALIZER_CLASS_CONFIG,<span class="string">"org.apache.kafka.common.serialization.StringSerializer"</span>);</span><br><span class="line">        <span class="comment">//设置批量大小</span></span><br><span class="line">        properties.put(ProducerConfig.BATCH_SIZE_CONFIG,<span class="string">"6238"</span>);</span><br><span class="line">        <span class="comment">//设置提交延时</span></span><br><span class="line">        properties.put(ProducerConfig.LINGER_MS_CONFIG,<span class="string">"1"</span>);</span><br><span class="line">        <span class="comment">//设置producer缓存</span></span><br><span class="line">        properties.put(ProducerConfig.BUFFER_MEMORY_CONFIG,Long.MAX_VALUE);</span><br><span class="line"></span><br><span class="line">        KafkaProducer&lt;String, String&gt; producer = <span class="keyword">new</span> KafkaProducer&lt;String, String&gt;(properties);</span><br><span class="line">        <span class="keyword">for</span> ( <span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">12</span>; i++) &#123;</span><br><span class="line">            <span class="keyword">final</span> <span class="keyword">int</span> finalI = i;</span><br><span class="line">            producer.send(<span class="keyword">new</span> ProducerRecord&lt;String, String&gt;(<span class="string">"mytest"</span>, Integer.toString(i), Integer.toString(i)), <span class="keyword">new</span> Callback() &#123;</span><br><span class="line"></span><br><span class="line">                <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onCompletion</span><span class="params">(RecordMetadata metadata, Exception exception)</span> </span>&#123;</span><br><span class="line">                    <span class="keyword">if</span>(exception==<span class="keyword">null</span>)&#123;</span><br><span class="line">                        System.out.println(<span class="string">"发送成功: "</span> + finalI +<span class="string">","</span>+metadata.partition()+<span class="string">","</span>+ metadata.offset());</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;);</span><br><span class="line">        &#125;</span><br><span class="line">        producer.close();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p></p><p>结果：<br></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">发送成功: 0,0,170</span><br><span class="line">发送成功: 2,0,171</span><br><span class="line">发送成功: 11,0,172</span><br><span class="line">发送成功: 4,1,101</span><br><span class="line">发送成功: 5,2,116</span><br><span class="line">发送成功: 6,2,117</span><br><span class="line">发送成功: 10,2,118</span><br><span class="line">发送成功: 1,3,175</span><br><span class="line">发送成功: 3,3,176</span><br><span class="line">发送成功: 7,3,177</span><br><span class="line">发送成功: 8,3,178</span><br><span class="line">发送成功: 9,3,179</span><br></pre></td></tr></table></figure><p></p><p>数据不均等的分配到0-3 号分区上</p><ol start="3"><li>自定义分区发送<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.sonly.kafka;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.apache.kafka.clients.producer.Partitioner;</span><br><span class="line"><span class="keyword">import</span> org.apache.kafka.common.Cluster;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.Map;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * &lt;b&gt;package:com.sonly.kafka&lt;/b&gt;</span></span><br><span class="line"><span class="comment"> * &lt;b&gt;project(项目):kafkaAPIdemo&lt;/b&gt;</span></span><br><span class="line"><span class="comment"> * &lt;b&gt;class(类)$&#123;CLASS_NAME&#125;&lt;/b&gt;</span></span><br><span class="line"><span class="comment"> * &lt;b&gt;creat date(创建时间):2019-05-03 13:43&lt;/b&gt;</span></span><br><span class="line"><span class="comment"> * &lt;b&gt;author(作者):&lt;/b&gt;xxydliuyss&lt;/br&gt;</span></span><br><span class="line"><span class="comment"> * &lt;b&gt;note(备注)):&lt;/b&gt;</span></span><br><span class="line"><span class="comment"> * If you want to change the file header,please modify zhe File and Code Templates.</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">CustomProducer</span> <span class="keyword">implements</span> <span class="title">Partitioner</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">partition</span><span class="params">(String topic, Object key, <span class="keyword">byte</span>[] keyBytes, Object value, <span class="keyword">byte</span>[] valueBytes, Cluster cluster)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">close</span><span class="params">()</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">configure</span><span class="params">(Map&lt;String, ?&gt; configs)</span> </span>&#123;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ol><p>设置分区<br></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.sonly.kafka;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.apache.kafka.clients.producer.*;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.Properties;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * &lt;b&gt;package:com.sonly.kafka&lt;/b&gt;</span></span><br><span class="line"><span class="comment"> * &lt;b&gt;project(项目):kafkaAPIdemo&lt;/b&gt;</span></span><br><span class="line"><span class="comment"> * &lt;b&gt;class(类)$&#123;CLASS_NAME&#125;&lt;/b&gt;</span></span><br><span class="line"><span class="comment"> * &lt;b&gt;creat date(创建时间):2019-05-03 13:46&lt;/b&gt;</span></span><br><span class="line"><span class="comment"> * &lt;b&gt;author(作者):&lt;/b&gt;xxydliuyss&lt;/br&gt;</span></span><br><span class="line"><span class="comment"> * &lt;b&gt;note(备注)):&lt;/b&gt;</span></span><br><span class="line"><span class="comment"> * If you want to change the file header,please modify zhe File and Code Templates.</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">demo2</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        Properties properties = <span class="keyword">new</span> Properties();</span><br><span class="line">        <span class="comment">//设置kafka集群</span></span><br><span class="line">        properties.put(ProducerConfig.BOOTSTRAP_SERVERS_CONFIG,<span class="string">"k8s-n1:9092"</span>);</span><br><span class="line">        <span class="comment">//设置brokeACK应答机制</span></span><br><span class="line">        properties.put(ProducerConfig.ACKS_CONFIG,<span class="string">"1"</span>);</span><br><span class="line">        <span class="comment">//设置key序列化</span></span><br><span class="line">        properties.put(ProducerConfig.KEY_SERIALIZER_CLASS_CONFIG,<span class="string">"org.apache.kafka.common.serialization.StringSerializer"</span>);</span><br><span class="line">        <span class="comment">//设置value序列化</span></span><br><span class="line">        properties.put(ProducerConfig.VALUE_SERIALIZER_CLASS_CONFIG,<span class="string">"org.apache.kafka.common.serialization.StringSerializer"</span>);</span><br><span class="line">        <span class="comment">//设置批量大小</span></span><br><span class="line">        properties.put(ProducerConfig.BATCH_SIZE_CONFIG,<span class="string">"6238"</span>);</span><br><span class="line">        <span class="comment">//设置提交延时</span></span><br><span class="line">        properties.put(ProducerConfig.LINGER_MS_CONFIG,<span class="string">"1"</span>);</span><br><span class="line">        <span class="comment">//设置producer缓存</span></span><br><span class="line">        properties.put(ProducerConfig.BUFFER_MEMORY_CONFIG,Long.MAX_VALUE);</span><br><span class="line">        <span class="comment">//设置partition</span></span><br><span class="line">        properties.put(ProducerConfig.PARTITIONER_CLASS_CONFIG,<span class="string">"com.sonly.kafka.CustomProducer"</span>);</span><br><span class="line">        KafkaProducer&lt;String, String&gt; producer = <span class="keyword">new</span> KafkaProducer&lt;String, String&gt;(properties);</span><br><span class="line">        <span class="keyword">for</span> ( <span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">12</span>; i++) &#123;</span><br><span class="line">            <span class="keyword">final</span> <span class="keyword">int</span> finalI = i;</span><br><span class="line">            producer.send(<span class="keyword">new</span> ProducerRecord&lt;String, String&gt;(<span class="string">"mytest"</span>, Integer.toString(i), Integer.toString(i)), <span class="keyword">new</span> Callback() &#123;</span><br><span class="line"></span><br><span class="line">                <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onCompletion</span><span class="params">(RecordMetadata metadata, Exception exception)</span> </span>&#123;</span><br><span class="line">                    <span class="keyword">if</span>(exception==<span class="keyword">null</span>)&#123;</span><br><span class="line">                        System.out.println(<span class="string">"发送成功: "</span> + finalI +<span class="string">","</span>+metadata.partition()+<span class="string">","</span>+ metadata.offset());</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;);</span><br><span class="line">        &#125;</span><br><span class="line">        producer.close();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p></p><p>消费者高级API：<br></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.sonly.kafka.consumer;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.apache.kafka.clients.consumer.ConsumerConfig;</span><br><span class="line"><span class="keyword">import</span> org.apache.kafka.clients.consumer.ConsumerRecord;</span><br><span class="line"><span class="keyword">import</span> org.apache.kafka.clients.consumer.ConsumerRecords;</span><br><span class="line"><span class="keyword">import</span> org.apache.kafka.clients.consumer.KafkaConsumer;</span><br><span class="line"><span class="keyword">import</span> org.apache.kafka.clients.producer.ProducerConfig;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.Arrays;</span><br><span class="line"><span class="keyword">import</span> java.util.Properties;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * &lt;b&gt;package:com.sonly.kafka.consumer&lt;/b&gt;</span></span><br><span class="line"><span class="comment"> * &lt;b&gt;project(项目):kafkaAPIdemo&lt;/b&gt;</span></span><br><span class="line"><span class="comment"> * &lt;b&gt;class(类)$&#123;CLASS_NAME&#125;&lt;/b&gt;</span></span><br><span class="line"><span class="comment"> * &lt;b&gt;creat date(创建时间):2019-05-03 13:59&lt;/b&gt;</span></span><br><span class="line"><span class="comment"> * &lt;b&gt;author(作者):&lt;/b&gt;xxydliuyss&lt;/br&gt;</span></span><br><span class="line"><span class="comment"> * &lt;b&gt;note(备注)):&lt;/b&gt;</span></span><br><span class="line"><span class="comment"> * If you want to change the file header,please modify zhe File and Code Templates.</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ConsumerDemo</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        Properties properties = <span class="keyword">new</span> Properties();</span><br><span class="line">        <span class="comment">//设置kafka集群</span></span><br><span class="line">        properties.put(ConsumerConfig.BOOTSTRAP_SERVERS_CONFIG,<span class="string">"k8s-n1:9092"</span>);</span><br><span class="line">        <span class="comment">//设置brokeACK应答机制</span></span><br><span class="line">        properties.put(ConsumerConfig.GROUP_ID_CONFIG,<span class="string">"teste3432"</span>);</span><br><span class="line">        <span class="comment">//设置key反序列化</span></span><br><span class="line">        properties.put(ConsumerConfig.KEY_DESERIALIZER_CLASS_CONFIG,<span class="string">"org.apache.kafka.common.serialization.StringDeserializer"</span>);</span><br><span class="line">        <span class="comment">//设置value反序列化</span></span><br><span class="line">        properties.put(ConsumerConfig.VALUE_DESERIALIZER_CLASS_CONFIG,<span class="string">"org.apache.kafka.common.serialization.StringDeserializer"</span>);</span><br><span class="line">        <span class="comment">//设置拿取大小</span></span><br><span class="line">        properties.put(ConsumerConfig.FETCH_MAX_BYTES_CONFIG,<span class="number">100</span>*<span class="number">1024</span>*<span class="number">1024</span>);</span><br><span class="line">        <span class="comment">//设置自动提交offset</span></span><br><span class="line">        properties.put(ConsumerConfig.ENABLE_AUTO_COMMIT_CONFIG,<span class="keyword">true</span>);</span><br><span class="line">        <span class="comment">//设置自动提交延时</span></span><br><span class="line">        properties.put(ConsumerConfig.AUTO_COMMIT_INTERVAL_MS_CONFIG,<span class="number">1000</span>);</span><br><span class="line">        KafkaConsumer&lt;String, String&gt; consumer = <span class="keyword">new</span> KafkaConsumer&lt;String, String&gt;(properties);</span><br><span class="line">        consumer.subscribe(Arrays.asList(<span class="string">"mytest"</span>,<span class="string">"test"</span>));</span><br><span class="line">        <span class="keyword">while</span> (<span class="keyword">true</span>)&#123;</span><br><span class="line">            ConsumerRecords&lt;String, String&gt; records = consumer.poll(<span class="number">10</span>);</span><br><span class="line">            <span class="keyword">for</span> (ConsumerRecord&lt;String, String&gt; record : records) &#123;</span><br><span class="line">                System.out.println(record.topic()+<span class="string">"--"</span>+record.partition()+<span class="string">"--"</span>+record.value());</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p></p><p>低级API：<br>1.消费者使用低级API的主要步骤</p><table><thead><tr><th>步骤</th><th>主要工作</th></tr></thead><tbody><tr><td>1</td><td>根据指定分区从topic元数据中找到leader</td></tr><tr><td>2</td><td>获取分区最新的消费进度</td></tr><tr><td>3</td><td>从主副本中拉取分区消息</td></tr><tr><td>4</td><td>识别主副本的变化，重试</td></tr></tbody></table><p>2.方法描述：</p><table><thead><tr><th>方法</th><th>描述</th></tr></thead><tbody><tr><td>findLeader()</td><td>客户端向种子阶段发送主题元数据，将副本加入备用节点</td></tr><tr><td>getLastOffset()</td><td>消费者客户端发送偏移量请求，获取分区最近的偏移量</td></tr><tr><td>run()</td><td>消费者低级API拉取消息的方法</td></tr><tr><td>findNewLeader()</td><td>当分区主副本节点发生故障时，客户端将要找出新的主副本</td></tr></tbody></table><p>修改pom<br></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">&lt;dependency&gt;</span><br><span class="line">    &lt;groupId&gt;org.apache.kafka&lt;/groupId&gt;</span><br><span class="line">    &lt;artifactId&gt;kafka_2.11&lt;/artifactId&gt;</span><br><span class="line">    &lt;version&gt;1.1.1&lt;/version&gt;</span><br><span class="line">&lt;/dependency&gt;</span><br><span class="line">&lt;dependency&gt;</span><br><span class="line">    &lt;groupId&gt;org.apache.kafka&lt;/groupId&gt;</span><br><span class="line">    &lt;artifactId&gt;kafka-clients&lt;/artifactId&gt;</span><br><span class="line">    &lt;version&gt;1.1.1&lt;/version&gt;</span><br><span class="line">&lt;/dependency&gt;</span><br></pre></td></tr></table></figure><p></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.sonly.kafka.consumer;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> kafka.api.FetchRequest;</span><br><span class="line"><span class="keyword">import</span> kafka.api.FetchRequestBuilder;</span><br><span class="line"><span class="keyword">import</span> kafka.api.KAFKA_0_8_1$;</span><br><span class="line"><span class="keyword">import</span> kafka.cluster.BrokerEndPoint;</span><br><span class="line"><span class="keyword">import</span> kafka.javaapi.*;</span><br><span class="line"><span class="keyword">import</span> kafka.javaapi.consumer.SimpleConsumer;</span><br><span class="line"><span class="keyword">import</span> kafka.javaapi.message.ByteBufferMessageSet;</span><br><span class="line"><span class="keyword">import</span> kafka.message.MessageAndOffset;</span><br><span class="line"><span class="keyword">import</span> org.apache.kafka.clients.consumer.Consumer;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.nio.ByteBuffer;</span><br><span class="line"><span class="keyword">import</span> java.util.*;</span><br><span class="line"><span class="keyword">import</span> java.util.concurrent.TimeUnit;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * &lt;b&gt;package:com.sonly.kafka.consumer&lt;/b&gt;</span></span><br><span class="line"><span class="comment"> * &lt;b&gt;project(项目):kafkaAPIdemo&lt;/b&gt;</span></span><br><span class="line"><span class="comment"> * &lt;b&gt;class(类)$&#123;CLASS_NAME&#125;&lt;/b&gt;</span></span><br><span class="line"><span class="comment"> * &lt;b&gt;creat date(创建时间):2019-05-03 15:21&lt;/b&gt;</span></span><br><span class="line"><span class="comment"> * &lt;b&gt;author(作者):&lt;/b&gt;xxydliuyss&lt;/br&gt;</span></span><br><span class="line"><span class="comment"> * &lt;b&gt;note(备注)):&lt;/b&gt;</span></span><br><span class="line"><span class="comment"> * If you want to change the file header,please modify zhe File and Code Templates.</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">LowerConsumer</span> </span>&#123;</span><br><span class="line">    <span class="comment">//保存offset</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">long</span> offset;</span><br><span class="line">    <span class="comment">//保存分区副本</span></span><br><span class="line">    <span class="keyword">private</span> Map&lt;Integer,List&lt;BrokerEndPoint&gt;&gt; partitionsMap = <span class="keyword">new</span> HashMap&lt;Integer, List&lt;BrokerEndPoint&gt;&gt;(<span class="number">1024</span>);</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> InterruptedException </span>&#123;</span><br><span class="line">        List&lt;String&gt; brokers = Arrays.asList(<span class="string">"k8s-n1"</span>, <span class="string">"k8s-n2"</span>,<span class="string">"k8s-n3"</span>);</span><br><span class="line">        <span class="keyword">int</span> port = <span class="number">9092</span>;</span><br><span class="line">        <span class="keyword">int</span> partition = <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">long</span> offset=<span class="number">2</span>;</span><br><span class="line">        LowerConsumer lowerConsumer = <span class="keyword">new</span> LowerConsumer();</span><br><span class="line">        <span class="keyword">while</span>(<span class="keyword">true</span>)&#123;</span><br><span class="line"><span class="comment">//            offset = lowerConsumer.getOffset();</span></span><br><span class="line">            lowerConsumer.getData(brokers,port,<span class="string">"mytest"</span>,partition,offset);</span><br><span class="line">            TimeUnit.SECONDS.sleep(<span class="number">1</span>);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">long</span> <span class="title">getOffset</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> offset;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> BrokerEndPoint <span class="title">findLeader</span><span class="params">(Collection&lt;String&gt; brokers,<span class="keyword">int</span> port,String topic,<span class="keyword">int</span> partition)</span></span>&#123;</span><br><span class="line">        <span class="keyword">for</span> (String broker : brokers) &#123;</span><br><span class="line">            <span class="comment">//创建消费者对象操作每一台服务器</span></span><br><span class="line">            SimpleConsumer getLeader = <span class="keyword">new</span> SimpleConsumer(broker, port, <span class="number">10000</span>, <span class="number">1024</span> * <span class="number">24</span>, <span class="string">"getLeader"</span>);</span><br><span class="line">            <span class="comment">//构造元数据请求</span></span><br><span class="line">            TopicMetadataRequest topicMetadataRequest = <span class="keyword">new</span> TopicMetadataRequest(Collections.singletonList(topic));</span><br><span class="line">            <span class="comment">//发送元数据请求</span></span><br><span class="line">            TopicMetadataResponse response = getLeader.send(topicMetadataRequest);</span><br><span class="line">            <span class="comment">//解析元数据</span></span><br><span class="line">            List&lt;TopicMetadata&gt; topicMetadatas = response.topicsMetadata();</span><br><span class="line">            <span class="comment">//遍历数据</span></span><br><span class="line">            <span class="keyword">for</span> (TopicMetadata topicMetadata : topicMetadatas) &#123;</span><br><span class="line">                <span class="comment">//获取分区元数据信息</span></span><br><span class="line">                List&lt;PartitionMetadata&gt; partitionMetadatas = topicMetadata.partitionsMetadata();</span><br><span class="line">                <span class="comment">//遍历分区元数据</span></span><br><span class="line">                <span class="keyword">for</span> (PartitionMetadata partitionMetadata : partitionMetadatas) &#123;</span><br><span class="line">                    <span class="keyword">if</span>(partition == partitionMetadata.partitionId())&#123;</span><br><span class="line">                        <span class="comment">//保存，分区对应的副本，如果需要主副本挂掉重新获取leader只需要遍历这个缓存即可</span></span><br><span class="line">                        List&lt;BrokerEndPoint&gt; isr = partitionMetadata.isr();</span><br><span class="line">                        <span class="keyword">this</span>.partitionsMap.put(partition,isr);</span><br><span class="line">                        <span class="keyword">return</span> partitionMetadata.leader();</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">getData</span><span class="params">(Collection&lt;String&gt; brokers,<span class="keyword">int</span> port,String topic,<span class="keyword">int</span> partition,<span class="keyword">long</span> offset)</span></span>&#123;</span><br><span class="line">        <span class="comment">//获取leader</span></span><br><span class="line">        BrokerEndPoint leader = findLeader(brokers, port, topic, partition);</span><br><span class="line">        <span class="keyword">if</span>(leader==<span class="keyword">null</span>) <span class="keyword">return</span>;</span><br><span class="line">        String host = leader.host();</span><br><span class="line">        <span class="comment">//获取数据的消费者对象</span></span><br><span class="line">        SimpleConsumer getData = <span class="keyword">new</span> SimpleConsumer(host, port, <span class="number">10000</span>, <span class="number">1024</span> * <span class="number">10</span>, <span class="string">"getData"</span>);</span><br><span class="line">        <span class="comment">//构造获取数据request 这里一次可以添加多个topic addFecth 添加即可</span></span><br><span class="line">        FetchRequest fetchRequestBuilder = <span class="keyword">new</span> FetchRequestBuilder().addFetch(topic, partition, offset, <span class="number">1024</span> * <span class="number">10</span>).build();</span><br><span class="line">        <span class="comment">//发送获取数据请求</span></span><br><span class="line">        FetchResponse fetchResponse = getData.fetch(fetchRequestBuilder);</span><br><span class="line">        <span class="comment">//解析元数据返回，这是message的一个set集合</span></span><br><span class="line">        ByteBufferMessageSet messageAndOffsets = fetchResponse.messageSet(topic, partition);</span><br><span class="line">        <span class="comment">//遍历消息集合</span></span><br><span class="line">        <span class="keyword">for</span> (MessageAndOffset messageAndOffset : messageAndOffsets) &#123;</span><br><span class="line">            <span class="keyword">long</span> offset1 = messageAndOffset.offset();</span><br><span class="line">            <span class="keyword">this</span>.setOffset(offset);</span><br><span class="line">            ByteBuffer payload = messageAndOffset.message().payload();</span><br><span class="line">            <span class="keyword">byte</span>[] buffer = <span class="keyword">new</span> <span class="keyword">byte</span>[payload.limit()];</span><br><span class="line">            payload.get(buffer);</span><br><span class="line">            String message = <span class="keyword">new</span> String(buffer);</span><br><span class="line">            System.out.println(<span class="string">"offset:"</span>+ offset1 +<span class="string">"--message:"</span>+ message);</span><br><span class="line"></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">setOffset</span><span class="params">(<span class="keyword">long</span> offset)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.offset = offset;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这个低级API在最新的kafka版本中已经不再提供了。</p><!-- rebuild by neat -->]]></content>
    
    <summary type="html">
    
      
      
        &lt;!-- build time:Fri May 03 2019 21:23:30 GMT+0800 (GMT+08:00) --&gt;&lt;h1 id=&quot;kafka-API&quot;&gt;&lt;a href=&quot;#kafka-API&quot; class=&quot;headerlink&quot; title=&quot;kafka API
      
    
    </summary>
    
      <category term="消息队列" scheme="http://www.liuyong520.cn/categories/%E6%B6%88%E6%81%AF%E9%98%9F%E5%88%97/"/>
    
    
      <category term="kafka" scheme="http://www.liuyong520.cn/tags/kafka/"/>
    
  </entry>
  
  <entry>
    <title>Linux下kafka集群搭建</title>
    <link href="http://www.liuyong520.cn/2019/04/29/kafka-install/"/>
    <id>http://www.liuyong520.cn/2019/04/29/kafka-install/</id>
    <published>2019-04-29T02:56:51.000Z</published>
    <updated>2019-04-30T02:48:31.425Z</updated>
    
    <content type="html"><![CDATA[<!-- build time:Fri May 03 2019 21:23:30 GMT+0800 (GMT+08:00) --><h2 id="环境准备"><a href="#环境准备" class="headerlink" title="环境准备"></a>环境准备</h2><ol><li><p>zookeeper集群环境<br>kafka是依赖于zookeeper注册中心的一款分布式消息对列，所以需要有zookeeper单机或者集群环境。</p></li><li><p>三台服务器：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">172.16.18.198 k8s-n1</span><br><span class="line">172.16.18.199 k8s-n2</span><br><span class="line">172.16.18.200 k8s-n3</span><br></pre></td></tr></table></figure></li><li><p>下载kafka安装包</p></li></ol><p><a href="http://kafka.apache.org/downloads" target="_blank" rel="noopener">http://kafka.apache.org/downloads</a> 中下载，目前最新版本的kafka已经到2.2.0,我这里之前下载的是kafka_2.11-2.2.0.tgz.</p><h2 id="安装kafka集群"><a href="#安装kafka集群" class="headerlink" title="安装kafka集群"></a>安装kafka集群</h2><ol><li><p>上传压缩包到三台服务器解压缩到/opt/目录下</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">tar -zxvf kafka_2.11-2.2.0.tgz -C /opt/</span><br><span class="line">ls -s kafka_2.11-2.2.0 kafka</span><br></pre></td></tr></table></figure></li><li><p>修改 server.properties</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br></pre></td><td class="code"><pre><span class="line">############################# Server Basics #############################</span><br><span class="line"></span><br><span class="line"># The id of the broker. This must be set to a unique integer for each broker.</span><br><span class="line">broker.id=0</span><br><span class="line"></span><br><span class="line">############################# Socket Server Settings #############################</span><br><span class="line"></span><br><span class="line"># The address the socket server listens on. It will get the value returned from </span><br><span class="line"># java.net.InetAddress.getCanonicalHostName() if not configured.</span><br><span class="line">#   FORMAT:</span><br><span class="line">#     listeners = listener_name://host_name:port</span><br><span class="line">#   EXAMPLE:</span><br><span class="line">#     listeners = PLAINTEXT://your.host.name:9092</span><br><span class="line">listeners=PLAINTEXT://k8s-n1:9092</span><br><span class="line"></span><br><span class="line"># Hostname and port the broker will advertise to producers and consumers. If not set, </span><br><span class="line"># it uses the value for &quot;listeners&quot; if configured.  Otherwise, it will use the value</span><br><span class="line"># returned from java.net.InetAddress.getCanonicalHostName().</span><br><span class="line">advertised.listeners=PLAINTEXT://k8s-n1:9092</span><br><span class="line"></span><br><span class="line"># Maps listener names to security protocols, the default is for them to be the same. See the config documentation for more details</span><br><span class="line">#listener.security.protocol.map=PLAINTEXT:PLAINTEXT,SSL:SSL,SASL_PLAINTEXT:SASL_PLAINTEXT,SASL_SSL:SASL_SSL</span><br><span class="line"></span><br><span class="line"># The number of threads that the server uses for receiving requests from the network and sending responses to the network</span><br><span class="line">num.network.threads=3</span><br><span class="line"></span><br><span class="line"># The number of threads that the server uses for processing requests, which may include disk I/O</span><br><span class="line">num.io.threads=8</span><br><span class="line"></span><br><span class="line"># The send buffer (SO_SNDBUF) used by the socket server</span><br><span class="line">socket.send.buffer.bytes=102400</span><br><span class="line"></span><br><span class="line"># The receive buffer (SO_RCVBUF) used by the socket server</span><br><span class="line">socket.receive.buffer.bytes=102400</span><br><span class="line"></span><br><span class="line"># The maximum size of a request that the socket server will accept (protection against OOM)</span><br><span class="line">socket.request.max.bytes=104857600</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">############################# Log Basics #############################</span><br><span class="line"></span><br><span class="line"># A comma separated list of directories under which to store log files</span><br><span class="line">log.dirs=/var/applog/kafka/</span><br><span class="line"></span><br><span class="line"># The default number of log partitions per topic. More partitions allow greater</span><br><span class="line"># parallelism for consumption, but this will also result in more files across</span><br><span class="line"># the brokers.</span><br><span class="line">num.partitions=5</span><br><span class="line"></span><br><span class="line"># The number of threads per data directory to be used for log recovery at startup and flushing at shutdown.</span><br><span class="line"># This value is recommended to be increased for installations with data dirs located in RAID array.</span><br><span class="line">num.recovery.threads.per.data.dir=1</span><br><span class="line"></span><br><span class="line">############################# Internal Topic Settings  #############################</span><br><span class="line"># The replication factor for the group metadata internal topics &quot;__consumer_offsets&quot; and &quot;__transaction_state&quot;</span><br><span class="line"># For anything other than development testing, a value greater than 1 is recommended for to ensure availability such as 3.</span><br><span class="line">offsets.topic.replication.factor=1</span><br><span class="line">transaction.state.log.replication.factor=1</span><br><span class="line">transaction.state.log.min.isr=1</span><br><span class="line"></span><br><span class="line">############################# Log Flush Policy #############################</span><br><span class="line"></span><br><span class="line"># Messages are immediately written to the filesystem but by default we only fsync() to sync</span><br><span class="line"># the OS cache lazily. The following configurations control the flush of data to disk.</span><br><span class="line"># There are a few important trade-offs here:</span><br><span class="line">#    1. Durability: Unflushed data may be lost if you are not using replication.</span><br><span class="line">#    2. Latency: Very large flush intervals may lead to latency spikes when the flush does occur as there will be a lot of data to flush.</span><br><span class="line">#    3. Throughput: The flush is generally the most expensive operation, and a small flush interval may lead to excessive seeks.</span><br><span class="line"># The settings below allow one to configure the flush policy to flush data after a period of time or</span><br><span class="line"># every N messages (or both). This can be done globally and overridden on a per-topic basis.</span><br><span class="line"></span><br><span class="line"># The number of messages to accept before forcing a flush of data to disk</span><br><span class="line">log.flush.interval.messages=10000</span><br><span class="line"></span><br><span class="line"># The maximum amount of time a message can sit in a log before we force a flush</span><br><span class="line">log.flush.interval.ms=1000</span><br><span class="line"></span><br><span class="line">############################# Log Retention Policy #############################</span><br><span class="line"></span><br><span class="line"># The following configurations control the disposal of log segments. The policy can</span><br><span class="line"># be set to delete segments after a period of time, or after a given size has accumulated.</span><br><span class="line"># A segment will be deleted whenever *either* of these criteria are met. Deletion always happens</span><br><span class="line"># from the end of the log.</span><br><span class="line"></span><br><span class="line"># The minimum age of a log file to be eligible for deletion due to age</span><br><span class="line">log.retention.hours=24</span><br><span class="line"></span><br><span class="line"># A size-based retention policy for logs. Segments are pruned from the log unless the remaining</span><br><span class="line"># segments drop below log.retention.bytes. Functions independently of log.retention.hours.</span><br><span class="line">#log.retention.bytes=1073741824</span><br><span class="line"></span><br><span class="line"># The maximum size of a log segment file. When this size is reached a new log segment will be created.</span><br><span class="line">log.segment.bytes=1073741824</span><br><span class="line"></span><br><span class="line"># The interval at which log segments are checked to see if they can be deleted according</span><br><span class="line"># to the retention policies</span><br><span class="line">log.retention.check.interval.ms=300000</span><br><span class="line"></span><br><span class="line">############################# Zookeeper #############################</span><br><span class="line"></span><br><span class="line"># Zookeeper connection string (see zookeeper docs for details).</span><br><span class="line"># This is a comma separated host:port pairs, each corresponding to a zk</span><br><span class="line"># server. e.g. &quot;127.0.0.1:3000,127.0.0.1:3001,127.0.0.1:3002&quot;.</span><br><span class="line"># You can also append an optional chroot string to the urls to specify the</span><br><span class="line"># root directory for all kafka znodes.</span><br><span class="line">zookeeper.connect=k8s-n1:2181,k8s-n2:2181,k8s-n3:2181</span><br><span class="line"></span><br><span class="line"># Timeout in ms for connecting to zookeeper</span><br><span class="line">zookeeper.connection.timeout.ms=6000</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">############################# Group Coordinator Settings #############################</span><br><span class="line"></span><br><span class="line"># The following configuration specifies the time, in milliseconds, that the GroupCoordinator will delay the initial consumer rebalance.</span><br><span class="line"># The rebalance will be further delayed by the value of group.initial.rebalance.delay.ms as new members join the group, up to a maximum of max.poll.interval.ms.</span><br><span class="line"># The default value for this is 3 seconds.</span><br><span class="line"># We override this to 0 here as it makes for a better out-of-the-box experience for development and testing.</span><br><span class="line"># However, in production environments the default value of 3 seconds is more suitable as this will help to avoid unnecessary, and potentially expensive, rebalances during application startup.</span><br><span class="line">group.initial.rebalance.delay.ms=0</span><br><span class="line"></span><br><span class="line">delete.topic.enable=true</span><br></pre></td></tr></table></figure></li></ol><p>拷贝两份到k8s-n2,k8s-n3<br></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">[root@k8s-n2 config]# cat server.properties </span><br><span class="line">broker.id=1</span><br><span class="line">listeners=PLAINTEXT://k8s-n2:9092</span><br><span class="line">advertised.listeners=PLAINTEXT://k8s-n2:9092</span><br><span class="line"></span><br><span class="line">[root@k8s-n3 config]# cat server.properties</span><br><span class="line">broker.id=2</span><br><span class="line">listeners=PLAINTEXT://k8s-n3:9092</span><br><span class="line">advertised.listeners=PLAINTEXT://k8s-n3:9092</span><br></pre></td></tr></table></figure><p></p><ol start="3"><li>添加环境变量 在/etc/profile 中添加</li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">export ZOOKEEPER_HOME=/opt/kafka_2.11-2.2.0</span><br><span class="line">export PATH=$PATH:$ZOOKEEPER_HOME/bin</span><br></pre></td></tr></table></figure><p>source /etc/profile 重载生效</p><ol start="4"><li>启动kafka<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">kafka-server-start.sh config/server.properties &amp;</span><br></pre></td></tr></table></figure></li></ol><h3 id="Zookeeper-Kafka集群测试"><a href="#Zookeeper-Kafka集群测试" class="headerlink" title="Zookeeper+Kafka集群测试"></a>Zookeeper+Kafka集群测试</h3><ol><li><p>创建topic:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">kafka-topics.sh --create --zookeeper k8s-n1:2181, k8s-n2:2181, k8s-n3:2181 --replication-factor 3 --partitions 3 --topic test</span><br></pre></td></tr></table></figure></li><li><p>显示topic</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">kafka-topics.sh --describe --zookeeper k8s-n1:2181, k8s-n2:2181, k8s-n3:2181 --topic test</span><br></pre></td></tr></table></figure></li><li><p>列出topic</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">kafka-topics.sh --list --zookeeper k8s-n1:2181, k8s-n2:2181, k8s-n3:2181</span><br><span class="line">test</span><br></pre></td></tr></table></figure></li></ol><p>创建 producer(生产者);<br></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">kafka-console-producer.sh --broker-list k8s-n1:9092 --topic test</span><br><span class="line">hello</span><br></pre></td></tr></table></figure><p></p><p>创建 consumer（消费者）<br></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">kafka-console-consumer.sh --bootstrap-server k8s-n1:9092 --topic test --from-beginning</span><br><span class="line">hello</span><br></pre></td></tr></table></figure><p></p><p>至此，kafka集群搭建就已经完成了。</p><!-- rebuild by neat -->]]></content>
    
    <summary type="html">
    
      
      
        &lt;!-- build time:Fri May 03 2019 21:23:30 GMT+0800 (GMT+08:00) --&gt;&lt;h2 id=&quot;环境准备&quot;&gt;&lt;a href=&quot;#环境准备&quot; class=&quot;headerlink&quot; title=&quot;环境准备&quot;&gt;&lt;/a&gt;环境准备&lt;/h2&gt;
      
    
    </summary>
    
      <category term="消息队列" scheme="http://www.liuyong520.cn/categories/%E6%B6%88%E6%81%AF%E9%98%9F%E5%88%97/"/>
    
    
      <category term="kafka" scheme="http://www.liuyong520.cn/tags/kafka/"/>
    
      <category term="linux" scheme="http://www.liuyong520.cn/tags/linux/"/>
    
  </entry>
  
  <entry>
    <title>Linux下zookeeper集群搭建</title>
    <link href="http://www.liuyong520.cn/2019/04/29/zookeeper-install/"/>
    <id>http://www.liuyong520.cn/2019/04/29/zookeeper-install/</id>
    <published>2019-04-29T02:56:51.000Z</published>
    <updated>2019-04-29T10:04:56.654Z</updated>
    
    <content type="html"><![CDATA[<!-- build time:Fri May 03 2019 21:23:30 GMT+0800 (GMT+08:00) --><h2 id="部署前准备"><a href="#部署前准备" class="headerlink" title="部署前准备"></a>部署前准备</h2><ol><li><p>下载zookeeper的安装包<br><a href="http://zookeeper.apache.org/releases.html" target="_blank" rel="noopener">http://zookeeper.apache.org/releases.html</a> 我下载的版本是zookeeper-3.4.10。</p></li><li><p>准备三台服务器<br>ip地址为：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">172.16.18.198</span><br><span class="line">172.16.18.199</span><br><span class="line">172.16.18.200</span><br></pre></td></tr></table></figure></li><li><p>检查jdk版本，安装jdk环境，jdk需要1.7以上。</p></li></ol><h2 id="安装zookeeper"><a href="#安装zookeeper" class="headerlink" title="安装zookeeper"></a>安装zookeeper</h2><ol><li><p>三台服务器分别上传zookeeper安装包，上传到/opt/目录下，然后tar zxvf zookeeper-3.4.10.tar.gz</p></li><li><p>拷贝zoo_sample.cfg 为zoo.cfg 修改/opt/zookeeper-3.4.10/conf/zoo.cfg配置文件，添加如下内容：</p></li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">server.1=172.16.18.198:2888:3888</span><br><span class="line">server.2=172.16.18.199:2888:3888</span><br><span class="line">server.3=172.16.18.200:2888:3888</span><br></pre></td></tr></table></figure><ol start="3"><li>修改zookeeper数据文件存放目录<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">dataDir=/data/zookeeper</span><br></pre></td></tr></table></figure></li></ol><p>此时zoo.cfg 配置文件内容为：<br></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"># The number of milliseconds of each tick</span><br><span class="line">tickTime=2000 ##zookeeper单位时间为2ms</span><br><span class="line"># The number of ticks that the initial </span><br><span class="line"># synchronization phase can take</span><br><span class="line">initLimit=10  ##对于从节点最初连接到主节点时的超时时间，单位为tick值的倍数。即20ms</span><br><span class="line"># The number of ticks that can pass between </span><br><span class="line"># sending a request and getting an acknowledgement</span><br><span class="line">syncLimit=5   ##对于主节点与从节点进行同步操作时的超时时间，单位为tick值的倍数。即10ms</span><br><span class="line"># the directory where the snapshot is stored.</span><br><span class="line"># do not use /tmp for storage, /tmp here is just </span><br><span class="line"># example sakes.</span><br><span class="line">dataDir=/data/zookeeper</span><br><span class="line"># the port at which the clients will connect</span><br><span class="line">clientPort=2181  ##客户端链接端口</span><br><span class="line"># the maximum number of client connections.</span><br><span class="line"># increase this if you need to handle more clients</span><br><span class="line">maxClientCnxns=60 ##客户端最大链接数</span><br><span class="line">#</span><br><span class="line"># Be sure to read the maintenance section of the </span><br><span class="line"># administrator guide before turning on autopurge.</span><br><span class="line">#</span><br><span class="line"># http://zookeeper.apache.org/doc/current/zookeeperAdmin.html#sc_maintenance</span><br><span class="line">#</span><br><span class="line"># The number of snapshots to retain in dataDir</span><br><span class="line">#autopurge.snapRetainCount=3</span><br><span class="line"># Purge task interval in hours</span><br><span class="line"># Set to &quot;0&quot; to disable auto purge feature</span><br><span class="line">#autopurge.purgeInterval=1</span><br><span class="line">server.1=172.16.18.198:2888:3888  </span><br><span class="line">server.2=172.16.18.199:2888:3888</span><br><span class="line">server.3=172.16.18.200:2888:3888</span><br></pre></td></tr></table></figure><p></p><ol start="4"><li><p>新建myid文件<br>在三台服务器的数据存放目录下新建myid文件，并写入对应的server.num 中的num数字<br>如：在172.16.18.198上将server.1中1写入myid</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">echo 1 &gt;/data/zookeeper/myid</span><br></pre></td></tr></table></figure></li><li><p>添加环境变量，方便我们执行脚本命令<br>vi etc/profile 在最后添加如下两个。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">export ZOOKEEPER_HOME=/opt/zookeeper-3.4.9</span><br><span class="line">export PATH=$PATH:$ZOOKEEPER_HOME/bin:$ZOOKEEPER_HOME/conf</span><br></pre></td></tr></table></figure></li></ol><p>保存后重新加载一下：<br></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">source /etc/profile</span><br></pre></td></tr></table></figure><p></p><ol start="6"><li>修改日志存放目录（可选）<br>vi /opt/zookeeper/bin/zkEnv.sh 找到ZOO_LOG_DIR 和 ZOO_LOG4J_PROP位置<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">if [ &quot;x$&#123;ZOO_LOG_DIR&#125;&quot; = &quot;x&quot; ] </span><br><span class="line">then </span><br><span class="line">    #配置zookeeper日志输出存放路径 </span><br><span class="line">    ZOO_LOG_DIR=&quot;/var/applog/zookeeper&quot; </span><br><span class="line">fi </span><br><span class="line"></span><br><span class="line">if [ &quot;x$&#123;ZOO_LOG4J_PROP&#125;&quot; = &quot;x&quot; ] </span><br><span class="line">then </span><br><span class="line">    #配置日志输出级别,这里把几个级别一并配上 </span><br><span class="line">    ZOO_LOG4J_PROP=&quot;INFO,CONSOLE,ROLLINGFILE,TRACEFILE&quot; </span><br><span class="line">fi</span><br></pre></td></tr></table></figure></li></ol><p>编辑conf目录下log4j.properties<br></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"># Define some default values that can be overridden by system properties </span><br><span class="line">zookeeper.root.logger=INFO, CONSOLE, ROLLINGFILE, TRACEFILE </span><br><span class="line">zookeeper.console.threshold=INFO </span><br><span class="line">zookeeper.log.dir=. </span><br><span class="line">zookeeper.log.file=zookeeper.log </span><br><span class="line">zookeeper.log.threshold=ERROR </span><br><span class="line">zookeeper.tracelog.dir=. </span><br><span class="line">zookeeper.tracelog.file=zookeeper_trace.log </span><br><span class="line">log4j.rootLogger=$&#123;zookeeper.root.logger&#125;</span><br></pre></td></tr></table></figure><p></p><p>完成log的日志目录的修改。<br>7.启动zookeeper服务</p><p>zkServer.sh start来启动。</p><p>zkServer.sh restart　　(重启)</p><p>zkServer.sh status　　(查看状态)</p><p>zkServer.sh stop　　(关闭)</p><p>zkServer.sh start-foreground　　(以打印日志方式启动)<br>三台服务器分别执行：<br></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">zkServer.sh start</span><br></pre></td></tr></table></figure><p></p><p>然后用 status 检查下状态 如果出现 Mode：leader 或者Mode:follower 表示搭建成功。否则前台执行看一下日志。<br></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">$ zkServer.sh status</span><br><span class="line">ZooKeeper JMX enabled by default</span><br><span class="line">Using config: /opt/zookeeper-3.4.10/bin/../conf/zoo.cfg</span><br><span class="line">Mode: follower</span><br></pre></td></tr></table></figure><p></p><p>如出现：<br></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">2019-04-29 14:04:05,992 [myid:3] - INFO  [ListenerThread:QuorumCnxManager$Listener@739] - My election bind port: /172.16.18.200:3888</span><br><span class="line">2019-04-29 14:04:06,019 [myid:3] - INFO  [QuorumPeer[myid=3]/0:0:0:0:0:0:0:0:2181:QuorumPeer@865] - LOOKING</span><br><span class="line">2019-04-29 14:04:06,025 [myid:3] - INFO  [QuorumPeer[myid=3]/0:0:0:0:0:0:0:0:2181:FastLeaderElection@818] - New election. My id =  3, proposed zxid=0x0</span><br><span class="line">2019-04-29 14:04:06,056 [myid:3] - WARN  [WorkerSender[myid=3]:QuorumCnxManager@588] - Cannot open channel to 1 at election address /172.16.18.198:3888</span><br><span class="line">java.net.NoRouteToHostException: 没有到主机的路由</span><br><span class="line">        at java.net.PlainSocketImpl.socketConnect(Native Method)</span><br><span class="line">        at java.net.AbstractPlainSocketImpl.doConnect(AbstractPlainSocketImpl.java:345)</span><br><span class="line">        at java.net.AbstractPlainSocketImpl.connectToAddress(AbstractPlainSocketImpl.java:206)</span><br><span class="line">        at java.net.AbstractPlainSocketImpl.connect(AbstractPlainSocketImpl.java:188)</span><br><span class="line">&quot;zookeeper.log&quot; 303L, 35429C</span><br></pre></td></tr></table></figure><p></p><p>报这种异常一般有三种情况：</p><p>1）：zoo.cfg配置文件中，server.x:2888:3888配置出现错误；</p><p>2）：myid文件内容和server.x不对应，或者myid不在data目录下；</p><p>3）：系统防火墙是否在启动。</p><p>我检查了三种原因后发现是防火墙running。</p><p>centos7下查看防火墙状态的命令：<br></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">firewall-cmd --state</span><br></pre></td></tr></table></figure><p></p><p>关闭防火墙的命令：<br></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">systemctl stop firewalld.service</span><br><span class="line">systemctl disable firewalld.service   （禁止开机启动，永久关闭防火墙）</span><br></pre></td></tr></table></figure><p></p><p>关闭防火墙后重启即可。</p><ol start="8"><li>验证是否成功<br>在命令行中输入：zkCli.sh -server 172.16.18.198:2181（由于本人在不同的办公地点在修改该文章，所以ip地址也在变化，知道原理即可）即可连接到其中一台ZooKeeper服务器。其他自动实现同步，客户端只需要和一台保持连接即可。出现如下表示链接成功<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">WATCHER::</span><br><span class="line"></span><br><span class="line">WatchedEvent state:SyncConnected type:None path:null</span><br><span class="line">[zk: 172.16.18.198:2181(CONNECTED) 0]</span><br></pre></td></tr></table></figure></li></ol><!-- rebuild by neat -->]]></content>
    
    <summary type="html">
    
      
      
        &lt;!-- build time:Fri May 03 2019 21:23:30 GMT+0800 (GMT+08:00) --&gt;&lt;h2 id=&quot;部署前准备&quot;&gt;&lt;a href=&quot;#部署前准备&quot; class=&quot;headerlink&quot; title=&quot;部署前准备&quot;&gt;&lt;/a&gt;部署前准备&lt;
      
    
    </summary>
    
      <category term="分布式集群" scheme="http://www.liuyong520.cn/categories/%E5%88%86%E5%B8%83%E5%BC%8F%E9%9B%86%E7%BE%A4/"/>
    
    
      <category term="linux" scheme="http://www.liuyong520.cn/tags/linux/"/>
    
      <category term="ZooKeeper" scheme="http://www.liuyong520.cn/tags/ZooKeeper/"/>
    
  </entry>
  
  <entry>
    <title>kafka基本介绍</title>
    <link href="http://www.liuyong520.cn/2019/04/29/kafka-intruduce/"/>
    <id>http://www.liuyong520.cn/2019/04/29/kafka-intruduce/</id>
    <published>2019-04-29T02:56:51.000Z</published>
    <updated>2019-05-02T11:30:40.781Z</updated>
    
    <content type="html"><![CDATA[<!-- build time:Fri May 03 2019 21:23:30 GMT+0800 (GMT+08:00) --><h1 id="kafka是什么？"><a href="#kafka是什么？" class="headerlink" title="kafka是什么？"></a>kafka是什么？</h1><p>Kafka是一个分布式流式存储并处理的消息队列。由scale+java语言编写，它提供了类似于JMS的特性，但是在设计实现上又完全不同，因为kafka并不是按照JMS规范实现的。kafka集群由多个broke（Kafka实例称之为broke）组成，在集群里，kafka通过消息订阅和发布将消息以topic的形式发布出来，同时，消息也是存储在topic中的，消息的发送者成为producer，消息接受者成为Consummer。<br>同时，topic 是根据分区partitions，和副本replications来实现的数据的分布式存储，和加强数据的可靠性。</p><p><img src="http://kafka.apache.org/22/images/kafka-apis.png" alt="官方图片"></p><h1 id="何为topic？"><a href="#何为topic？" class="headerlink" title="何为topic？"></a>何为topic？</h1><p>一个topic可以认为是一类消息，每个topic将被分成多个partitions，每个partition在存储append log的形式存在文件里的。任何发布到partition的消息都会直接被追加到log文件的末尾，每条消息在文件中的位置称之为offset偏移量，offset为一个long型数字，它唯一标识一条消息，kafka并没有提供其他索引来存储offset，因此kafka不支持消息的随机读写。<br><img src="http://kafka.apache.org/22/images/log_anatomy.png" alt="分区结构图"></p><p>kafka和JMS（Java Message Service）实现(activeMQ)不同的是:即使消息被消费,消息仍然不会被立即删除.日志文件将会根据broker中的配置要求,保留一定的时间之后(默认是7天)删除;比如log文件保留2天,那么两天后,文件会被清除,无论其中的消息是否被消费.kafka通过这种简单的手段,来释放磁盘空间,以及减少消息消费之后对文件内容改动的磁盘IO开支.</p><h1 id="kafka消息如何消费的？"><a href="#kafka消息如何消费的？" class="headerlink" title="kafka消息如何消费的？"></a>kafka消息如何消费的？</h1><p>对于consumer而言,它需要保存消费消息的offset,对于offset的保存和使用,有consumer来控制;当consumer正常消费消息时,offset将会”线性”的向前驱动,即消息将依次顺序被消费.事实上consumer可以使用任意顺序消费消息,它只需要将offset重置为任意值..(kafka 老版本中offset将会保存在zookeeper中,1.x之后也会存储在broke集群里,参见下文)</p><h1 id="kafka-集群里consumer和producer的状态信息是如何保存的？"><a href="#kafka-集群里consumer和producer的状态信息是如何保存的？" class="headerlink" title="kafka 集群里consumer和producer的状态信息是如何保存的？"></a>kafka 集群里consumer和producer的状态信息是如何保存的？</h1><p>kafka集群几乎不需要维护任何consumer和producer状态信息,这些信息由zookeeper保存;因此producer和consumer的客户端实现非常轻量级,它们可以随意离开,而不会对集群造成额外的影响.</p><h1 id="kafka为何要引入分区的概念，有何好处？"><a href="#kafka为何要引入分区的概念，有何好处？" class="headerlink" title="kafka为何要引入分区的概念，有何好处？"></a>kafka为何要引入分区的概念，有何好处？</h1><p>partitions的设计目的有多个.最根本原因是kafka基于文件存储.通过分区,可以将日志内容分散到多个kafka实例上,来避免文件尺寸达到单机磁盘的上限,每个partiton都会被当前server(kafka实例)保存;可以将一个topic切分多任意多个partitions,来消息保存/消费的效率.此外越多的partitions意味着可以容纳更多的consumer,有效提升并发消费的能力.有负载均衡的功效(具体原理参见下文).</p><h1 id="kakfa数据是如何写入到磁盘的？"><a href="#kakfa数据是如何写入到磁盘的？" class="headerlink" title="kakfa数据是如何写入到磁盘的？"></a>kakfa数据是如何写入到磁盘的？</h1><p>一个Topic的多个partitions,被分布在kafka集群中的多个server上;每个server(kafka实例)负责partitions中消息的读写操作;此外kafka还可以配置partitions需要备份的个数(replicas),每个partition将会被备份到多台机器上,以提高可用性.</p><p>基于replicated方案,那么就意味着需要对多个备份进行调度;每个partition都有一个server为”leader”;leader负责所有的读写操作,如果leader失效,那么将会有其他follower来接管(成为新的leader);follower只是单调的和leader跟进,同步消息即可..由此可见作为leader的server承载了全部的请求压力,因此从集群的整体考虑,有多少个partitions就意味着有多少个”leader”,kafka会将”leader”均衡的分散在每个实例上,来确保整体的性能稳定.这和zookeeper的follower是有区别的：zookeeper的follower是可以读到数据的，而kafka的follower是读不到数据的。</p><p>kafka使用文件存储消息,这就直接决定kafka在性能上严重依赖文件系统的本身特性.且无论任何OS下,对文件系统本身的优化几乎没有可能.文件缓存/直接内存映射等是常用的手段.因为kafka是对日志文件进行append操作,因此磁盘检索的开支是较小的;同时为了减少磁盘写入的次数,broker会将消息暂时buffer起来,当消息的个数(或尺寸)达到一定阀值时,再flush到磁盘,这样减少了磁盘IO调用的次数.</p><h1 id="kafka中消费者组如何理解？"><a href="#kafka中消费者组如何理解？" class="headerlink" title="kafka中消费者组如何理解？"></a>kafka中消费者组如何理解？</h1><p>Producer将消息发布到指定的Topic中,同时Producer也能决定将此消息归属于哪个partition;比如基于”round-robin”方式或者通过其他的一些算法等.</p><p>本质上kafka只支持Topic.每个consumer属于一个consumer group;反过来说,每个group中可以有多个consumer.发送到Topic的消息,只会被订阅此Topic的每个group中的一个consumer消费.</p><p>如果所有的consumer都具有相同的group,这种情况和queue模式很像;消息将会在consumers之间负载均衡.<br>如果所有的consumer都具有不同的group,那这就是”发布-订阅”;消息将会广播给所有的消费者.</p><p>在kafka中,一个partition中的消息只会被group中的一个consumer消费;每个group中consumer消息消费互相独立;我们可以认为一个group是一个”订阅”者,一个Topic中的每个partions,只会被一个”订阅者”中的一个consumer消费,不过一个consumer可以消费多个partitions中的消息.kafka只能保证一个partition中的消息被某个consumer消费时,消息是顺序的.事实上,从Topic角度来说,消息仍不是有序的. 因为消费者消费消息的时候是按照分区依次读取的，所以无法保证消息的全局顺序性，只能保证在同一个分区内的消息是顺序的。如果想要所有的消息都是顺序的，可以把分区数设置为1.</p><h1 id="kafka中如何保证数据一段时间内不丢失？"><a href="#kafka中如何保证数据一段时间内不丢失？" class="headerlink" title="kafka中如何保证数据一段时间内不丢失？"></a>kafka中如何保证数据一段时间内不丢失？</h1><p>kafka 的producer有ACK机制。可以由用户自行设定是否开启确认机制，如果开启确认机制，kafka会等发送消息到kafka集群时，当leader服务器，会返回元数据给producer客户端，ACK机制也在元数据里，这里的ACK有两种，一种就是leader只要接收成功，就返回确认，另外一种就是：要等所有follower都收到了之后才返回确认。producer在接收到确认之后，才会发下一条消息。而所有的消息最终都是存储在磁盘一段时间的，所以一段时间内消息是不会丢失的。</p><h1 id="kafka-的应用场景主要有哪些？"><a href="#kafka-的应用场景主要有哪些？" class="headerlink" title="kafka 的应用场景主要有哪些？"></a>kafka 的应用场景主要有哪些？</h1><p>官方介绍是讲可以用作message queue，数据采集，简单流式计算等。</p><h1 id="用作消息队列message-queue有哪些优缺点？"><a href="#用作消息队列message-queue有哪些优缺点？" class="headerlink" title="用作消息队列message queue有哪些优缺点？"></a>用作消息队列message queue有哪些优缺点？</h1><p>对于一些常规的消息系统,kafka是个不错的选择;partitons/replication和容错,可以使kafka具有良好的扩展性和性能优势.不过到目前为止,我们应该很清楚认识到,kafka并没有提供JMS中的”事务性””消息传输担保(消息确认机制)””消息分组”等企业级特性;kafka只能使用作为”常规”的消息系统,在一定程度上,尚未确保消息的发送与接收绝对可靠(比如,消息重发,消息发送丢失等)</p><h1 id="kafka是如何保持高性能的？"><a href="#kafka是如何保持高性能的？" class="headerlink" title="kafka是如何保持高性能的？"></a>kafka是如何保持高性能的？</h1><p>需要考虑的影响性能点很多,除磁盘IO之外,我们还需要考虑网络IO,这直接关系到kafka的吞吐量问题.kafka并没有提供太多高超的技巧;对于producer端,可以将消息buffer起来,当消息的条数达到一定阀值时,批量发送给broker;对于consumer端也是一样,批量fetch多条消息.不过消息量的大小可以通过配置文件来指定.对于kafka broker端,似乎有个sendfile系统调用可以潜在的提升网络IO的性能:将文件的数据映射到系统内存中,socket直接读取相应的内存区域即可,而无需进程再次copy和交换. 其实对于producer/consumer/broker三者而言,CPU的开支应该都不大,因此启用消息压缩机制是一个良好的策略;压缩需要消耗少量的CPU资源,不过对于kafka而言,网络IO更应该需要考虑.可以将任何在网络上传输的消息都经过压缩.kafka支持gzip/snappy等多种压缩方式.</p><h1 id="kafka在消费者端有哪些异常处理策略？"><a href="#kafka在消费者端有哪些异常处理策略？" class="headerlink" title="kafka在消费者端有哪些异常处理策略？"></a>kafka在消费者端有哪些异常处理策略？</h1><p>对于JMS实现,消息传输担保非常直接:有且只有一次(exactly once).在kafka中稍有不同:<br>1) at most once: 最多一次,这个和JMS中”非持久化”消息类似.发送一次,无论成败,将不会重发.<br>2) at least once: 消息至少发送一次,如果消息未能接受成功,可能会重发,直到接收成功.<br>3) exactly once: 消息只会发送一次.<br>at most once: 消费者fetch消息,然后保存offset,然后处理消息;当client保存offset之后,但是在消息处理过程中出现了异常,导致部分消息未能继续处理.那么此后”未处理”的消息将不能被fetch到,这就是”at most once”.<br>at least once: 消费者fetch消息,然后处理消息,然后保存offset.如果消息处理成功之后,但是在保存offset阶段zookeeper异常导致保存操作未能执行成功,这就导致接下来再次fetch时可能获得上次已经处理过的消息,这就是”at least once”，原因offset没有及时的提交给zookeeper，zookeeper恢复正常还是之前offset状态.</p><p>exactly once: kafka中并没有严格的去实现基于2阶段提交,事务),我们认为这种策略在kafka中是没有必要的.<br>通常情况下”at-least-once”是我们搜选.(相比at most once而言,重复接收数据总比丢失数据要好).</p><h1 id="kafka-工作流程是怎样的？"><a href="#kafka-工作流程是怎样的？" class="headerlink" title="kafka 工作流程是怎样的？"></a>kafka 工作流程是怎样的？</h1><ol><li>主要结构图：大体可以从三个方面分析：生产者产生消息、消费者消费消息、Broker cluster保存消息。<br><img src="https://www.github.com/liuyong520/pic/raw/master/小书匠/attachments_1556770670858.drawio.png" alt="结构图"></li><li><p>生产者产生消息过程分析</p><ul><li>写入方式：<br>producer 采用push的方式将消息发送到broker cluster，每条消息都被追加到分区中，属于顺序写磁盘（顺序写磁盘效率比随机写内存效率要高，能提高Kafka吞吐率）<br>而且broker集群并不是每一条消息都及时写磁盘，而是先写buffer，达到一定大小或者每隔一段时间再flush到磁盘上。<br>多个producer可以给同一个topic 发布消息，而且可以指定分区发布。</li><li>分区Partition<br>每个Topic可以有多个分区，而消息最终是存储在磁盘的文件里的，Partition在磁盘上是文件夹的形式存在的。如<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">cd /var/applog/kafka/ ## 赚到kafka数据目录 即log.dir=配置的目录</span><br><span class="line">ls</span><br><span class="line">cleaner-offset-checkpoint  __consumer_offsets-22  __consumer_offsets-4   log-start-offset-checkpoint  recovery-point-offset-checkpoint</span><br><span class="line">__consumer_offsets-1       __consumer_offsets-25  __consumer_offsets-40  meta.properties              replication-offset-checkpoint</span><br><span class="line">__consumer_offsets-10      __consumer_offsets-28  __consumer_offsets-43  mytest-0                     test-0</span><br><span class="line">__consumer_offsets-13      __consumer_offsets-31  __consumer_offsets-46  mytest-1</span><br><span class="line">__consumer_offsets-16      __consumer_offsets-34  __consumer_offsets-49  mytest-2</span><br><span class="line">__consumer_offsets-19      __consumer_offsets-37  __consumer_offsets-7   mytest-3</span><br></pre></td></tr></table></figure></li></ul><p>其中mytest-0 mytest-1 mytest-2 mytest-3 即为分区Partition，里面的文件就是分区里面存放的数据。</p></li><li><p>broker cluster 保存消息<br>broker 收到消息后，首先会去找topic对应分区的leader，找到leader后，先将数据写入buffer，再flush到磁盘。然后zookeeper会协调follower自动同步leader分区的数据，以达到replication备份的目的，同时leader会按照备份完成的先后顺序给follower作一次排序，作为leader发生意外时选举时选举为leader的顺序。<br><img src="https://www.github.com/liuyong520/pic/raw/master/小书匠/1556780993351.png" alt="enter description here"></p></li><li>消费者消费消息<ol><li>消费者消费消息，同一个分区里的数据不能够被一个消费组里面的多个消费者同时消费，同一个消费组里的消费者只能消费不同分区的数据。</li><li>不同消费者组可以消费同一个分区里的数据。</li><li>消费者消费数据时是按照分区的一个一个分区数据进行消费的。<h1 id="zookeeper在kafka中的具体作用是什么？"><a href="#zookeeper在kafka中的具体作用是什么？" class="headerlink" title="zookeeper在kafka中的具体作用是什么？"></a>zookeeper在kafka中的具体作用是什么？</h1>kafka是依赖于zookeeper注册中心的，主要来协调各个broker的分区备份，broker的选举，以及消费者相关状信息的存储。<br>kafka使用zookeeper来存储一些meta信息,并使用了zookeeper watch机制来发现meta信息的变更并作出相应的动作(比如consumer失效,触发负载均衡等)<br>1) Broker node registry: 当一个kafkabroker启动后,首先会向zookeeper注册自己的节点信息(临时znode),同时当broker和zookeeper断开连接时,此znode也会被删除.<br>格式: /broker/ids/[0…N] –&gt;host:port;其中[0..N]表示broker id,每个broker的配置文件中都需要指定一个数字类型的id(全局不可重复),znode的值为此broker的host:port信息.<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">$ zkCli -server k8s-n1:2181</span><br><span class="line">$ ls /brokers</span><br><span class="line">[ids, topics, seqid]</span><br><span class="line">$ ls /brokers/ids</span><br><span class="line">[0, 1, 2]</span><br><span class="line">$ get /brokers/ids/0</span><br><span class="line">&#123;&quot;listener_security_protocol_map&quot;:&#123;&quot;PLAINTEXT&quot;:&quot;PLAINTEXT&quot;&#125;,&quot;endpoints&quot;:[&quot;PLAINTEXT://k8s-n1:9092&quot;],&quot;jmx_port&quot;:-1,&quot;host&quot;:&quot;k8s-n1&quot;,&quot;timestamp&quot;:&quot;1556568752340&quot;,&quot;port&quot;:9092,&quot;version&quot;:4&#125;</span><br><span class="line">cZxid = 0xd0000003c</span><br><span class="line">ctime = Wed Apr 24 16:10:19 CST 2019</span><br><span class="line">mZxid = 0xd0000003c</span><br><span class="line">mtime = Wed Apr 24 16:10:19 CST 2019</span><br><span class="line">pZxid = 0xd0000003c</span><br><span class="line">cversion = 0</span><br><span class="line">dataVersion = 1</span><br><span class="line">aclVersion = 0</span><br><span class="line">ephemeralOwner = 0x26a4e173fc40002</span><br><span class="line">dataLength = 182</span><br><span class="line">numChildren = 0</span><br></pre></td></tr></table></figure></li></ol></li></ol><p>2) Broker Topic Registry: 当一个broker启动时,会向zookeeper注册自己持有的topic和partitions信息,仍然是一个临时znode.<br>格式: /broker/topics/[topic]/[0…N] 其中[0..N]表示partition索引号.<br></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ ls /brokers/topics</span><br><span class="line">[test, __consumer_offsets]</span><br></pre></td></tr></table></figure><p></p><p>__consumer_offsets 是消费端的offset<br></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">$ ls /brokers/topics/test</span><br><span class="line">[partitions] ##test的分区信息</span><br><span class="line">$ ls /brokers/topics/test/partitions</span><br><span class="line">[0]</span><br><span class="line">$ ls /brokers/topics/test/partitions/0</span><br><span class="line">[state]</span><br><span class="line">$ get /brokers/topics/test/partitions/0/state   </span><br><span class="line">&#123;&quot;controller_epoch&quot;:19,&quot;leader&quot;:0,&quot;version&quot;:1,&quot;leader_epoch&quot;:3,&quot;isr&quot;:[0]&#125;</span><br><span class="line">cZxid = 0x2000000b6</span><br><span class="line">ctime = Wed Apr 24 07:53:42 CST 2019</span><br><span class="line">mZxid = 0xd00000044</span><br><span class="line">mtime = Wed Apr 24 16:10:19 CST 2019</span><br><span class="line">pZxid = 0x2000000b6</span><br><span class="line">cversion = 0</span><br><span class="line">dataVersion = 3</span><br><span class="line">aclVersion = 0</span><br><span class="line">ephemeralOwner = 0x0</span><br><span class="line">dataLength = 73</span><br><span class="line">numChildren = 0</span><br></pre></td></tr></table></figure><p></p><p>3) Consumer and Consumer group: 每个consumer客户端被创建时,会向zookeeper注册自己的信息;此作用主要是为了”负载均衡”.<br>一个group中的多个consumer可以交错的消费一个topic的所有partitions;简而言之,保证此topic的所有partitions都能被此group所消费,且消费时为了性能考虑,让partition相对均衡的分散到每个consumer上.</p><p>4) Consumer id Registry: 每个consumer都有一个唯一的ID(host:uuid,可以通过配置文件指定,也可以由系统生成),此id用来标记消费者信息.<br>格式:/consumers/[group_id]/ids/[consumer_id]<br>仍然是一个临时的znode,此节点的值为{“topic_name”:#streams…},即表示此consumer目前所消费的topic + partitions列表.<br>启动消费者：<br></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$  kafka-console-consumer.sh --bootstrap-server k8s-n2:9092 --topic test</span><br></pre></td></tr></table></figure><p></p><p>启动生成者：<br></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">kafka-console-producer.sh --broker-list k8s-n1:9092 --topic test</span><br></pre></td></tr></table></figure><p></p><p>查看zookeeper信息：<br></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">$ ls /</span><br><span class="line">[cluster, controller_epoch, controller, brokers, zookeeper, admin, isr_change_notification, consumers, log_dir_event_notification, latest_producer_id_block, config]</span><br><span class="line">$ ls /consumers</span><br><span class="line">[]</span><br></pre></td></tr></table></figure><p></p><p>发现consummer下啥也没有？这是因为新版本的kafka，consumer中offset不是放在这个位置的，而是放在__consumer_offset 这个topic下的。那么该如何验证呢？<br>启动消费者：<br></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$  kafka-console-consumer.sh --bootstrap-server k8s-n2:9092 --topic test</span><br></pre></td></tr></table></figure><p></p><p>启动生成者：<br></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">kafka-console-producer.sh --broker-list k8s-n1:9092 --topic test</span><br></pre></td></tr></table></figure><p></p><p>验证消息生产成功<br></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">kafka-run-class.sh kafka.tools.GetOffsetShell --broker-list k8s-n1:9092 --topic mytest --time -1</span><br><span class="line">mytest:0:15</span><br><span class="line">mytest:1:16</span><br><span class="line">mytest:2:16</span><br><span class="line">mytest:3:15</span><br></pre></td></tr></table></figure><p></p><p>mytest topic 上 0号分区有15条消息。很好理解。<br>再创建一个消费者组<br></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">kafka-console-consumer.sh --bootstrap-server k8s-n1:9092 --topic mytest --from-beginning</span><br></pre></td></tr></table></figure><p></p><p>查询一下消费者组信息<br></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">kafka-consumer-groups.sh --bootstrap-server k8s-n1:9092 --list</span><br><span class="line">console-consumer-24766</span><br><span class="line">console-consumer-52794</span><br></pre></td></tr></table></figure><p></p><p>查询一下topic里的内容：<br></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">kafka-console-consumer.sh --topic __consumer_offsets --bootstrap-server k8s-n1:9092 --formatter &quot;kafka.coordinator.group.GroupMetadataManager\$OffsetsMessageFormatter&quot; --consumer.config config/consumer.properties --from-beginning</span><br></pre></td></tr></table></figure><p></p><p>结果：<br></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"> [console-consumer-52794,__consumer_offsets,12]::OffsetAndMetadata(offset=0, leaderEpoch=Optional.empty, metadata=, commitTimestamp=1556122524504, expireTimestamp=None)</span><br><span class="line">[console-consumer-52794,__consumer_offsets,45]::OffsetAndMetadata(offset=0, leaderEpoch=Optional.empty, metadata=, commitTimestamp=1556122524504, expireTimestamp=None)</span><br><span class="line">[console-consumer-52794,__consumer_offsets,1]::OffsetAndMetadata(offset=0, leaderEpoch=Optional.empty, metadata=, commitTimestamp=1556122524504, expireTimestamp=None)</span><br><span class="line">[console-consumer-52794,__consumer_offsets,5]::OffsetAndMetadata(offset=0, leaderEpoch=Optional.empty, metadata=, commitTimestamp=1556122524504, expireTimestamp=None)</span><br><span class="line">[console-consumer-52794,__consumer_offsets,26]::OffsetAndMetadata(offset=0, leaderEpoch=Optional.empty, metadata=, commitTimestamp=1556122524504, expireTimestamp=None)</span><br><span class="line">[console-consumer-52794,__consumer_offsets,29]::OffsetAndMetadata(offset=0, leaderEpoch=Optional.empty, metadata=, commitTimestamp=1556122524504, expireTimestamp=None)</span><br><span class="line">[console-consumer-52794,__consumer_offsets,34]::OffsetAndMetadata(offset=0, leaderEpoch=Optional.empty, metadata=, commitTimestamp=1556122524504, expireTimestamp=None)</span><br><span class="line">[console-consumer-52794,__consumer_offsets,10]::OffsetAndMetadata(offset=0, leaderEpoch=Optional.empty, metadata=, commitTimestamp=1556122524504, expireTimestamp=None)</span><br><span class="line">[console-consumer-52794,__consumer_offsets,32]::OffsetAndMetadata(offset=5, leaderEpoch=Optional.empty, metadata=, commitTimestamp=1556122524504, expireTimestamp=None)</span><br><span class="line">[console-consumer-52794,__consumer_offsets,40]::OffsetAndMetadata(offset=3, leaderEpoch=Optional.empty, metadata=, commitTimestamp=1556122524504, expireTimestamp=None)</span><br><span class="line">^CProcessed a total of 1674 messages</span><br></pre></td></tr></table></figure><p></p><p>参考了 <a href="http://www.cnblogs.com/huxi2b/p/6061110.html这篇blog的作法，但是我的版本是kafka_2.2.0里面并没有找offset的命令。" target="_blank" rel="noopener">http://www.cnblogs.com/huxi2b/p/6061110.html这篇blog的作法，但是我的版本是kafka_2.2.0里面并没有找offset的命令。</a></p><p>5) Consumer offset Tracking: 用来跟踪每个consumer目前所消费的partition中最大的offset.<br>格式:/consumers/[group_id]/offsets/[topic]/[broker_id-partition_id]–&gt;offset_value<br>此znode为持久节点,可以看出offset跟group_id有关,以表明当group中一个消费者失效,其他consumer可以继续消费.<br>6) Partition Owner registry: 用来标记partition被哪个consumer消费.临时znode<br>格式:/consumers/[group_id]/owners/[topic]/[broker_id-partition_id]–&gt;consumer_node_id当consumer启动时,所触发的操作:<br>A) 首先进行”Consumer id Registry”;<br>B) 然后在”Consumer id Registry”节点下注册一个watch用来监听当前group中其他consumer的”leave”和”join”;只要此znode path下节点列表变更,都会触发此group下consumer的负载均衡.(比如一个consumer失效,那么其他consumer接管partitions).<br>C) 在”Broker id registry”节点下,注册一个watch用来监听broker的存活情况;如果broker列表变更,将会触发所有的groups下的consumer重新balance.</p><!-- rebuild by neat -->]]></content>
    
    <summary type="html">
    
      
      
        &lt;!-- build time:Fri May 03 2019 21:23:30 GMT+0800 (GMT+08:00) --&gt;&lt;h1 id=&quot;kafka是什么？&quot;&gt;&lt;a href=&quot;#kafka是什么？&quot; class=&quot;headerlink&quot; title=&quot;kafka是什么？
      
    
    </summary>
    
      <category term="消息队列" scheme="http://www.liuyong520.cn/categories/%E6%B6%88%E6%81%AF%E9%98%9F%E5%88%97/"/>
    
    
      <category term="kafka" scheme="http://www.liuyong520.cn/tags/kafka/"/>
    
      <category term="linux" scheme="http://www.liuyong520.cn/tags/linux/"/>
    
  </entry>
  
  <entry>
    <title>hexo博客主题优化</title>
    <link href="http://www.liuyong520.cn/2017/08/29/hexo-promise/"/>
    <id>http://www.liuyong520.cn/2017/08/29/hexo-promise/</id>
    <published>2017-08-29T02:56:51.000Z</published>
    <updated>2019-04-28T08:58:06.799Z</updated>
    
    <content type="html"><![CDATA[<!-- build time:Fri May 03 2019 21:23:31 GMT+0800 (GMT+08:00) --><p>在介绍博客主题优化这个话题之前，我想先介绍hexo主题的大体结构，便于后面将主题优化方面的东西。</p><h2 id="hexo主题结构"><a href="#hexo主题结构" class="headerlink" title="hexo主题结构"></a>hexo主题结构</h2><p>我这里选用pure主题为例进行讲解。</p><ol><li>进入themes/pure文件夹下执行如下命令<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br></pre></td><td class="code"><pre><span class="line">$ tree</span><br><span class="line">.</span><br><span class="line">├── LICENSE</span><br><span class="line">├── README.cn.md</span><br><span class="line">├── README.md</span><br><span class="line">├── _config.yml #主题主配置文件</span><br><span class="line">├── _config.yml.example #主题配置文件例子</span><br><span class="line">├── _source #博客页面例子文件夹</span><br><span class="line">│   ├── 404 #博客404页面只要拷贝到站点soure就行</span><br><span class="line">│   │   └── index.md</span><br><span class="line">│   ├── _data #博客友情链接页面</span><br><span class="line">│   │   ├── gallery.yml</span><br><span class="line">│   │   └── links.yml</span><br><span class="line">│   ├── about #博客关于页面</span><br><span class="line">│   │   └── index.md</span><br><span class="line">│   ├── books #博客书单页面</span><br><span class="line">│   │   └── index.md</span><br><span class="line">│   ├── categories #博客分类页面</span><br><span class="line">│   │   └── index.md</span><br><span class="line">│   ├── links #博客友情链接</span><br><span class="line">│   │   └── index.md</span><br><span class="line">│   ├── repository #博客仓库模版页面</span><br><span class="line">│   │   └── index.md</span><br><span class="line">│   └── tags #博客标签页面</span><br><span class="line">│       └── index.md</span><br><span class="line">├── languages #博客语言切换配置文件夹</span><br><span class="line">│   ├── default.yml</span><br><span class="line">│   ├── en.yml</span><br><span class="line">│   ├── zh-CN.yml</span><br><span class="line">│   └── zh-TW.yml</span><br><span class="line">├── layout #博客布局文件夹 这里就是生成页面的精华部分了</span><br><span class="line">│   ├── _common</span><br><span class="line">│   │   ├── footer.ejs</span><br><span class="line">│   │   ├── head.ejs</span><br><span class="line">│   │   ├── header.ejs</span><br><span class="line">│   │   ├── script.ejs</span><br><span class="line">│   │   └── social.ejs</span><br><span class="line">│   ├── _partial</span><br><span class="line">│   │   ├── archive-book.ejs</span><br><span class="line">│   │   ├── archive-category.ejs</span><br><span class="line">│   │   ├── archive-link.ejs</span><br><span class="line">│   │   ├── archive-list.ejs</span><br><span class="line">│   │   ├── archive-post.ejs</span><br><span class="line">│   │   ├── archive-repository.ejs</span><br><span class="line">│   │   ├── archive-tag.ejs</span><br><span class="line">│   │   ├── archive.ejs</span><br><span class="line">│   │   ├── article-about.ejs</span><br><span class="line">│   │   ├── article.ejs</span><br><span class="line">│   │   ├── item-post.ejs</span><br><span class="line">│   │   ├── pagination.ejs</span><br><span class="line">│   │   ├── post</span><br><span class="line">│   │   │   ├── category.ejs</span><br><span class="line">│   │   │   ├── comment.ejs</span><br><span class="line">│   │   │   ├── copyright.ejs</span><br><span class="line">│   │   │   ├── date.ejs</span><br><span class="line">│   │   │   ├── donate.ejs</span><br><span class="line">│   │   │   ├── gallery.ejs</span><br><span class="line">│   │   │   ├── nav.ejs</span><br><span class="line">│   │   │   ├── pv.ejs</span><br><span class="line">│   │   │   ├── tag.ejs</span><br><span class="line">│   │   │   ├── thumbnail.ejs</span><br><span class="line">│   │   │   ├── title.ejs</span><br><span class="line">│   │   │   └── wordcount.ejs</span><br><span class="line">│   │   ├── sidebar-about.ejs</span><br><span class="line">│   │   ├── sidebar-toc.ejs</span><br><span class="line">│   │   └── sidebar.ejs</span><br><span class="line">│   ├── _script</span><br><span class="line">│   │   ├── _analytics</span><br><span class="line">│   │   │   ├── baidu-analytics.ejs</span><br><span class="line">│   │   │   ├── google-analytics.ejs</span><br><span class="line">│   │   │   └── tencent-analytics.ejs</span><br><span class="line">│   │   ├── _comment</span><br><span class="line">│   │   │   ├── disqus.ejs</span><br><span class="line">│   │   │   ├── gitalk.ejs</span><br><span class="line">│   │   │   ├── gitment.ejs</span><br><span class="line">│   │   │   ├── livere.ejs</span><br><span class="line">│   │   │   ├── valine.ejs</span><br><span class="line">│   │   │   └── youyan.ejs</span><br><span class="line">│   │   ├── _search</span><br><span class="line">│   │   │   ├── baidu.ejs</span><br><span class="line">│   │   │   └── insight.ejs</span><br><span class="line">│   │   ├── analytics.ejs</span><br><span class="line">│   │   ├── comment.ejs</span><br><span class="line">│   │   ├── douban.ejs</span><br><span class="line">│   │   ├── fancybox.ejs</span><br><span class="line">│   │   ├── mathjax.ejs</span><br><span class="line">│   │   ├── pv.ejs</span><br><span class="line">│   │   ├── repository.ejs</span><br><span class="line">│   │   └── search.ejs</span><br><span class="line">│   ├── _search</span><br><span class="line">│   │   ├── baidu.ejs</span><br><span class="line">│   │   ├── index-mobile.ejs</span><br><span class="line">│   │   ├── index.ejs</span><br><span class="line">│   │   ├── insight.ejs</span><br><span class="line">│   │   └── swiftype.ejs</span><br><span class="line">│   ├── _widget</span><br><span class="line">│   │   ├── archive.ejs</span><br><span class="line">│   │   ├── board.ejs</span><br><span class="line">│   │   ├── category.ejs</span><br><span class="line">│   │   ├── recent_posts.ejs</span><br><span class="line">│   │   ├── tag.ejs</span><br><span class="line">│   │   └── tagcloud.ejs</span><br><span class="line">│   ├── about.ejs</span><br><span class="line">│   ├── archive.ejs</span><br><span class="line">│   ├── books.ejs</span><br><span class="line">│   ├── categories.ejs</span><br><span class="line">│   ├── category.ejs</span><br><span class="line">│   ├── index.ejs</span><br><span class="line">│   ├── layout.ejs</span><br><span class="line">│   ├── links.ejs</span><br><span class="line">│   ├── page.ejs</span><br><span class="line">│   ├── post.ejs</span><br><span class="line">│   ├── repository.ejs</span><br><span class="line">│   ├── tag.ejs</span><br><span class="line">│   └── tags.ejs</span><br><span class="line">├── package.json</span><br><span class="line">├── screenshot #主题颜色切换背景</span><br><span class="line">│   ├── pure-theme-black.png</span><br><span class="line">│   ├── pure-theme-blue.png</span><br><span class="line">│   ├── pure-theme-green.png</span><br><span class="line">│   ├── pure-theme-purple.png</span><br><span class="line">│   ├── pure.png</span><br><span class="line">│   └── pure.psd</span><br><span class="line">├── scripts</span><br><span class="line">│   └── thumbnail.js</span><br><span class="line">└── source #主题静态资源文件目录</span><br><span class="line">    ├── css</span><br><span class="line">    │   ├── style.css</span><br><span class="line">    │   └── style.min.css</span><br><span class="line">    ├── favicon.png</span><br><span class="line">    ├── fonts</span><br><span class="line">    │   ├── README.md</span><br><span class="line">    │   ├── iconfont.eot</span><br><span class="line">    │   ├── iconfont.svg</span><br><span class="line">    │   ├── iconfont.ttf</span><br><span class="line">    │   └── iconfont.woff</span><br><span class="line">    ├── images</span><br><span class="line">    │   ├── avatar.jpg</span><br><span class="line">    │   ├── avatar.jpg1</span><br><span class="line">    │   ├── donate</span><br><span class="line">    │   │   ├── alipayimg.png</span><br><span class="line">    │   │   └── wechatpayimg.png</span><br><span class="line">    │   ├── favatar</span><br><span class="line">    │   │   ├── SzsFox-logo.png</span><br><span class="line">    │   │   ├── chuangzaoshi-logo.png</span><br><span class="line">    │   │   └── idesign-logo.png</span><br><span class="line">    │   ├── thumb-default.png</span><br><span class="line">    │   └── xingqiu-qrcode.jpg</span><br><span class="line">    └── js</span><br><span class="line">        ├── application.js</span><br><span class="line">        ├── application.min.js</span><br><span class="line">        ├── insight.js</span><br><span class="line">        ├── jquery.min.js</span><br><span class="line">        ├── plugin.js</span><br><span class="line">        ├── plugin.js.map</span><br><span class="line">        └── plugin.min.js</span><br><span class="line"></span><br><span class="line">29 directories, 125 files</span><br></pre></td></tr></table></figure></li></ol><p>layout里面的文件使用ejs （js模版语言）<a href="https://ejs.bootcss.com/" target="_blank" rel="noopener">ejs官网</a>实现的，里面把整个页面通过js抽取各个小的模块模版文件，同时数据和标签页面是分离的，所以在页面里面可以加载config.yml 里面的配置。</p><p>整个页面入口文件就是layout.js<br></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line">&lt;!DOCTYPE html&gt;</span><br><span class="line">&lt;html&lt;%= config.language ? &quot; lang=&quot; + config.language.substring(0, 2) : &quot;&quot;%&gt;&gt;</span><br><span class="line">&lt;%- partial(&apos;_common/head&apos;, &#123;post: page&#125;) %&gt;</span><br><span class="line">##这里会判断是否启用layout配置</span><br><span class="line">&lt;% </span><br><span class="line">var bodyClass = &apos;main-center&apos;; </span><br><span class="line">if (theme.config.layout) &#123;</span><br><span class="line">bodyClass = theme.config.layout;</span><br><span class="line">&#125;</span><br><span class="line">  if (theme.config.skin) &#123;</span><br><span class="line">    bodyClass += &apos; &apos; + theme.config.skin;</span><br><span class="line">  &#125;</span><br><span class="line">bodyClass = page.sidebar === &apos;none&apos; ? (bodyClass + &apos; no-sidebar&apos;) : bodyClass;</span><br><span class="line">%&gt;</span><br><span class="line">&lt;body class=&quot;&lt;%= bodyClass %&gt;&quot; itemscope itemtype=&quot;http://schema.org/WebPage&quot;&gt;</span><br><span class="line">  &lt;%- partial(&apos;_common/header&apos;, null, &#123;cache: !config.relative_link&#125;) %&gt;</span><br><span class="line">  &lt;% if (theme.sidebar &amp;&amp; (page.sidebar!=&apos;none&apos; || page.sidebar!=&apos;custom&apos;))&#123; %&gt;</span><br><span class="line">    &lt;% if (theme.config.toc &amp;&amp; page.toc)&#123; %&gt;</span><br><span class="line">    &lt;%- partial(&apos;_partial/sidebar-toc&apos;, &#123;post: page&#125;) %&gt;</span><br><span class="line">    &lt;% &#125;else&#123; %&gt;</span><br><span class="line">    &lt;%- partial(&apos;_partial/sidebar&apos;, null, &#123;cache: !config.relative_link&#125;) %&gt;</span><br><span class="line">    &lt;% &#125; %&gt;</span><br><span class="line">  &lt;% &#125; %&gt;</span><br><span class="line">  &lt;%- body %&gt;</span><br><span class="line">  &lt;%- partial(&apos;_common/footer&apos;, null, &#123;cache: !config.relative_link&#125;) %&gt;</span><br><span class="line">  &lt;%- partial(&apos;_common/script&apos;, &#123;post: page&#125;) %&gt;</span><br><span class="line">&lt;/body&gt;</span><br><span class="line">&lt;/html&gt;</span><br></pre></td></tr></table></figure><p></p><p>其中&lt;%- partial(‘_common/footer’, null, {cache: !config.relative_link}) %&gt; 表示引入子模块_common/footer.ejs文件，{cache: !config.relative_link}表示参数<br>我们的创建的博客文章都会加载这个布局文件。</p><ol start="2"><li><p>我们新创建的博客文章有如下的配置：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">title: 文章标题</span><br><span class="line">categories:</span><br><span class="line">  - 文章分类</span><br><span class="line">tags:</span><br><span class="line">  - 文章标签</span><br><span class="line">toc: true # 是否启用内容索引</span><br><span class="line">comment:true #是否启用评论</span><br><span class="line">layout:模版文件，如果没有默认不加载任何模版</span><br><span class="line">sidebar: none # 是否启用sidebar侧边栏，none：不启用，不配置默认启动</span><br></pre></td></tr></table></figure><p>以上配置属于page 域的配置文件属于单个页面的，而config.language 这种是全局配置文件（也就是站点配置文件config.yml），每个页面都能使用。theme.config 加载的就是主题的配置文件config.yml 文件。</p><ol start="3"><li>主题配置文件config.yml<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br><span class="line">222</span><br><span class="line">223</span><br><span class="line">224</span><br><span class="line">225</span><br><span class="line">226</span><br><span class="line">227</span><br><span class="line">228</span><br><span class="line">229</span><br><span class="line">230</span><br><span class="line">231</span><br><span class="line">232</span><br><span class="line">233</span><br><span class="line">234</span><br><span class="line">235</span><br><span class="line">236</span><br></pre></td><td class="code"><pre><span class="line"> # menu</span><br><span class="line">menu:</span><br><span class="line">  Home: .</span><br><span class="line">  Archives: archives  # 归档</span><br><span class="line">  Categories: categories  # 分类</span><br><span class="line">  Tags: tags  # 标签</span><br><span class="line">  Repository: repository  # github repositories</span><br><span class="line">  Books: books  # 豆瓣书单</span><br><span class="line">  Links: links  # 友链</span><br><span class="line">  About: about  # 关于</span><br><span class="line"></span><br><span class="line"># Enable/Disable menu icons</span><br><span class="line">menu_icons:</span><br><span class="line">  enable: true  # 是否启用导航菜单图标</span><br><span class="line">  home: icon-home-fill</span><br><span class="line">  archives: icon-archives-fill</span><br><span class="line">  categories: icon-folder</span><br><span class="line">  tags: icon-tags</span><br><span class="line">  repository: icon-project</span><br><span class="line">  books: icon-book-fill</span><br><span class="line">  links: icon-friendship</span><br><span class="line">  about: icon-cup-fill</span><br><span class="line"></span><br><span class="line"># rss</span><br><span class="line">rss: /atom.xml</span><br><span class="line"></span><br><span class="line"># Site</span><br><span class="line">site:</span><br><span class="line">  logo:</span><br><span class="line">    enabled: true</span><br><span class="line">    width: 40</span><br><span class="line">    height: 40</span><br><span class="line">    url: ../images/logo.png</span><br><span class="line">  title: Hexo # 页面title</span><br><span class="line">  favicon: /favicon.png</span><br><span class="line">  board: &lt;p&gt;欢迎交流与分享经验!&lt;/p&gt; # 站点公告</span><br><span class="line">  copyright: false # 底部版权信息</span><br><span class="line"></span><br><span class="line"># config</span><br><span class="line">config:</span><br><span class="line">  skin: theme-black # 主题颜色 theme-black theme-blue theme-green theme-purple</span><br><span class="line">  layout: main-center # 布局方式 main-left main-center main-right</span><br><span class="line">  toc: true # 是否开启文章章节目录导航</span><br><span class="line">  menu_highlight: false # 是否开启当前菜单高亮显示</span><br><span class="line">  thumbnail: false # enable posts thumbnail, options: true, false</span><br><span class="line">  excerpt_link: Read More</span><br><span class="line"></span><br><span class="line"># Pagination 分页</span><br><span class="line">pagination:</span><br><span class="line">  number: false #是否开启数字</span><br><span class="line">  prev: </span><br><span class="line">    alwayShow: true</span><br><span class="line">  next:</span><br><span class="line">    alwayShow: true</span><br><span class="line"></span><br><span class="line"># Sidebar</span><br><span class="line">sidebar: right</span><br><span class="line">widgets:</span><br><span class="line">  - board  </span><br><span class="line">  - category</span><br><span class="line">  - tag</span><br><span class="line">  - tagcloud</span><br><span class="line">  - archive</span><br><span class="line">  - recent_posts</span><br><span class="line"></span><br><span class="line"># display widgets at the bottom of index pages (pagination == 2)</span><br><span class="line">index_widgets:</span><br><span class="line"># - category</span><br><span class="line"># - tagcloud</span><br><span class="line"># - archive  </span><br><span class="line"></span><br><span class="line"># widget behavior</span><br><span class="line">archive_type: &apos;monthly&apos;</span><br><span class="line">show_count: true</span><br><span class="line"></span><br><span class="line"># Fancybox</span><br><span class="line">fancybox: false</span><br><span class="line"></span><br><span class="line"># Search</span><br><span class="line">search:</span><br><span class="line">  insight: true # you need to install `hexo-generator-json-content` before using Insight Search</span><br><span class="line">  baidu: false # you need to disable other search engines to use Baidu search, options: true, false</span><br><span class="line"></span><br><span class="line"># Donate</span><br><span class="line">donate:</span><br><span class="line">  enable: true</span><br><span class="line">  # 微信打赏</span><br><span class="line">  wechatpay:</span><br><span class="line">    qrcode: images/donate/wechatpayimg.png</span><br><span class="line">    title: 微信支付</span><br><span class="line">  # 支付宝打赏</span><br><span class="line">  alipay: </span><br><span class="line">    qrcode: images/donate/alipayimg.png </span><br><span class="line">    title: 支付宝</span><br><span class="line"></span><br><span class="line"># Share</span><br><span class="line"># weibo,qq,qzone,wechat,tencent,douban,diandian,facebook,twitter,google,linkedin</span><br><span class="line">share:</span><br><span class="line">  enable: true  # 是否启用分享</span><br><span class="line">  sites: weibo,qq,wechat,facebook,twitter  # PC端显示的分享图标</span><br><span class="line">  mobile_sites: weibo,qq,qzone  # 移动端显示的分享图标</span><br><span class="line"></span><br><span class="line"># Github</span><br><span class="line">github: </span><br><span class="line">  username: ***</span><br><span class="line"></span><br><span class="line"># Comment</span><br><span class="line"># Gitment</span><br><span class="line"># Introduction: https://imsun.net/posts/gitment-introduction/</span><br><span class="line">comment:</span><br><span class="line">  type: youyan</span><br><span class="line">  disqus: # enter disqus shortname here</span><br><span class="line">  youyan: </span><br><span class="line">    uid: 1783844 # enter youyan uid </span><br><span class="line">  livere:</span><br><span class="line">    uid: # enter youyan uid </span><br><span class="line">  gitment:</span><br><span class="line">    githubID: </span><br><span class="line">    repo: </span><br><span class="line">    ClientID: </span><br><span class="line">    ClientSecret: </span><br><span class="line">    lazy: false</span><br><span class="line">  gitalk: # gitalk. https://gitalk.github.io/</span><br><span class="line">    owner:  #必须. GitHub repository 所有者，可以是个人或者组织。</span><br><span class="line">    admin:  #必须. GitHub repository 的所有者和合作者 (对这个 repository 有写权限的用户)。</span><br><span class="line">    repo:  #必须. GitHub repository.</span><br><span class="line">    ClientID:  #必须. GitHub Application Client ID.</span><br><span class="line">    ClientSecret:  #必须. GitHub Application Client Secret.</span><br><span class="line">  valine: # Valine. https://valine.js.org</span><br><span class="line">    appid:  # your leancloud application appid</span><br><span class="line">    appkey:  # your leancloud application appkey</span><br><span class="line">    notify: false # mail notifier , https://github.com/xCss/Valine/wiki</span><br><span class="line">    verify: false # Verification code</span><br><span class="line">    placeholder: Just go go # comment box placeholder</span><br><span class="line">    avatar: mm # gravatar style</span><br><span class="line">    meta: nick,mail,link # custom comment header</span><br><span class="line">    pageSize: 10 # pagination size</span><br><span class="line">    visitor: false # Article reading statistic https://valine.js.org/visitor.html</span><br><span class="line"></span><br><span class="line"># douban 豆瓣书单</span><br><span class="line"># Api：</span><br><span class="line">  # https://developers.douban.com/wiki/?title=book_v2 图书</span><br><span class="line">  # https://developers.douban.com/wiki/?title=movie_v2 电影</span><br><span class="line"># books：  </span><br><span class="line">  # https://api.douban.com/v2/book/user/:name/collections?start=0&amp;count=100 个人书单列表</span><br><span class="line"># movies: </span><br><span class="line">  # https://api.douban.com/v2/movie/in_theaters 正在上映的电影</span><br><span class="line">  # https://api.douban.com/v2/movie/coming_soon 即将上映的电影</span><br><span class="line">  # https://api.douban.com/v2/movie/subject/:id 单个电影信息</span><br><span class="line">  # https://api.douban.com/v2/movie/search?q=&#123;text&#125; 电影搜索</span><br><span class="line">douban:</span><br><span class="line">  user: # 豆瓣用户名</span><br><span class="line">  start: 0 # 从哪一条记录开始</span><br><span class="line">  count: 100 # 获取豆瓣书单数据条数</span><br><span class="line">  </span><br><span class="line"># PV</span><br><span class="line">pv:</span><br><span class="line">  busuanzi:</span><br><span class="line">    enable: false  # 不蒜子统计</span><br><span class="line">  leancloud:</span><br><span class="line">    enable: false  # leancloud统计</span><br><span class="line">    app_id: # leancloud &lt;AppID&gt;</span><br><span class="line">    app_key: # leancloud &lt;AppKey&gt;</span><br><span class="line">        </span><br><span class="line"># wordcount</span><br><span class="line">postCount:</span><br><span class="line">  enable: false</span><br><span class="line">  wordcount: true  # 文章字数统计</span><br><span class="line">  min2read: true  # 阅读时长预计 </span><br><span class="line"></span><br><span class="line"># Plugins</span><br><span class="line">plugins:</span><br><span class="line">  google_analytics: # enter the tracking ID for your Google Analytics</span><br><span class="line">  google_site_verification: # enter Google site verification code</span><br><span class="line">  baidu_analytics: # enter Baidu Analytics hash key</span><br><span class="line">  tencent_analytics: </span><br><span class="line">  </span><br><span class="line"># Miscellaneous</span><br><span class="line">twitter:</span><br><span class="line">google_plus:</span><br><span class="line">fb_admins:</span><br><span class="line">fb_app_id:  </span><br><span class="line">  </span><br><span class="line"># profile</span><br><span class="line">profile:</span><br><span class="line">  enabled: true # Whether to show profile bar</span><br><span class="line">  avatar: images/avatar.jpg</span><br><span class="line">  gravatar: # Gravatar email address, if you enable Gravatar, your avatar config will be overriden</span><br><span class="line">  author: 昵称</span><br><span class="line">  author_title: Web Developer &amp; Designer</span><br><span class="line">  author_description: 个人简介。</span><br><span class="line">  location: Shenzhen, China</span><br><span class="line">  follow: https://github.com/cofess</span><br><span class="line">  # Social Links</span><br><span class="line">  social:</span><br><span class="line">    links:</span><br><span class="line">      github: https://github.com/cofess</span><br><span class="line">      weibo: http://weibo.com/cofess</span><br><span class="line">      twitter: https://twitter.com/iwebued</span><br><span class="line">      # facebook: /</span><br><span class="line">      # dribbble: /</span><br><span class="line">      behance: https://www.behance.net/cofess</span><br><span class="line">      rss: atom.xml</span><br><span class="line">    link_tooltip: true # enable the social link tooltip, options: true, false</span><br><span class="line">  # My Skills </span><br><span class="line">  skills:</span><br><span class="line">    Git: ★★★☆☆</span><br><span class="line">    Gulp: ★★★☆☆</span><br><span class="line">    Javascript: ★★★☆☆</span><br><span class="line">    HTML+CSS: ★★★☆☆</span><br><span class="line">    Bootstrap: ★★★☆☆</span><br><span class="line">    ThinkPHP: ★★★☆☆</span><br><span class="line">    平面设计: ★★★☆☆</span><br><span class="line">  # My Personal Links</span><br><span class="line">  links:</span><br><span class="line">    Github: https://github.com/cofess</span><br><span class="line">    Blog: http://blog.cofess.com</span><br><span class="line">    微博: http://weibo.com/cofess</span><br><span class="line">    花瓣: http://huaban.com/cofess</span><br><span class="line">    Behance: https://www.behance.net/cofess</span><br><span class="line">  # My Personal Labels</span><br><span class="line">  labels:</span><br><span class="line">    - 前端</span><br><span class="line">    - 前端开发</span><br><span class="line">    - 前端重构</span><br><span class="line">    - Web前端</span><br><span class="line">    - 网页重构</span><br><span class="line">  # My Personal Works</span><br><span class="line">  works:</span><br><span class="line">    name:</span><br><span class="line">      link: http://www.example.com</span><br><span class="line">      date: 2016</span><br><span class="line">  # My Personal Projects</span><br><span class="line">  projects:</span><br><span class="line">    cofess/gulp-startpro: https://github.com/cofess/gulp-startpro</span><br><span class="line">    cofess/hexo-theme-pure: https://github.com/cofess/hexo-theme-pure</span><br></pre></td></tr></table></figure></li></ol><p>基本上每个配置做什么用的，配置文件里面基本写了注解。也很容易理解。<br>如果还不是很能理解配置项。可以查看<a href="https://github.com/cofess/hexo-theme-pure/blob/master/README.cn.md" target="_blank" rel="noopener">https://github.com/cofess/hexo-theme-pure/blob/master/README.cn.md</a> 文件。<br>至此，hexo模版的大体结构已经清楚了。</p><h3 id="主题优化"><a href="#主题优化" class="headerlink" title="主题优化"></a>主题优化</h3><h4 id="修改主题"><a href="#修改主题" class="headerlink" title="修改主题"></a>修改主题</h4><p>在config.yml 文件中修改</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"> # Extensions</span><br><span class="line">## Plugins: https://hexo.io/plugins/</span><br><span class="line">## Themes: https://hexo.io/themes/</span><br><span class="line">theme: pure</span><br></pre></td></tr></table></figure></li></ol><h4 id="修改语言"><a href="#修改语言" class="headerlink" title="修改语言"></a>修改语言</h4><p>在config.yml 文件中修改<br></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"># Site</span><br><span class="line">language: zh-CN #修改成中文</span><br></pre></td></tr></table></figure><p></p><h4 id="添加Rss订阅"><a href="#添加Rss订阅" class="headerlink" title="添加Rss订阅"></a>添加Rss订阅</h4><ol><li><p>安装feed插件</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install hexo-generator-feed --save</span><br></pre></td></tr></table></figure></li><li><p>在config.yml添加</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"> # Extensions</span><br><span class="line">## Plugins: https://hexo.io/plugins/</span><br><span class="line">#RSS订阅</span><br><span class="line">plugin:</span><br><span class="line">- hexo-generator-feed</span><br></pre></td></tr></table></figure></li><li><p>设置feed插件参数</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"> #Feed Atom</span><br><span class="line">feed:</span><br><span class="line">  type: atom</span><br><span class="line">  path: atom.xml</span><br><span class="line">  limit: 20</span><br></pre></td></tr></table></figure></li><li><p>生成预览</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">hexo g</span><br><span class="line">hexo d</span><br></pre></td></tr></table></figure><p>预览下就是如下<br><img src="https://www.github.com/liuyong520/pic/raw/master/小书匠/1556433596798.png" alt="rss订阅"></p><h4 id="添加站点地图"><a href="#添加站点地图" class="headerlink" title="添加站点地图"></a>添加站点地图</h4><p>站点地图是一种文件，您可以通过该文件列出您网站上的网页，从而将您网站内容的组织架构告知Google和其他搜索引擎。Googlebot等搜索引擎网页抓取工具会读取此文件，以便更加智能地抓取您的网站</p><ol><li>分别安装百度和google插件<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">npm install hexo-generator-sitemap --save</span><br><span class="line">npm install hexo-generator-baidu-sitemap --save</span><br></pre></td></tr></table></figure></li></ol></li></ol><ol start="2"><li><p>在博客目录的_config.yml中添加如下代码</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"># 自动生成sitemap</span><br><span class="line">sitemap:</span><br><span class="line">path: sitemap.xml</span><br><span class="line">baidusitemap:</span><br><span class="line">path: baidusitemap.xml</span><br></pre></td></tr></table></figure></li><li><p>编译你的博客</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">hexo g</span><br><span class="line">hexo s</span><br></pre></td></tr></table></figure></li></ol><p>如果你在你的博客根目录的public下面发现生成了sitemap.xml以及baidusitemap.xml就表示成功了,在本地访问 <a href="http://127.0.0.4000/sitemap.xml" target="_blank" rel="noopener">http://127.0.0.4000/sitemap.xml</a> 和 <a href="http://127.0.0.4000/baidusitemap.xml" target="_blank" rel="noopener">http://127.0.0.4000/baidusitemap.xml</a> 就能正确的展示出两个sitemap 文件了。</p><ol start="4"><li>注册百度站长平台<br>4.1 访问：<a href="https://ziyuan.baidu.com/linksubmit/index" target="_blank" rel="noopener">https://ziyuan.baidu.com/linksubmit/index</a><br>4.2 提交链接<br>提交链接方式有主动推送、自动推送、sitemap、手动上传等。<br><img src="https://www.github.com/liuyong520/pic/raw/master/小书匠/1556435172481.png" alt="enter description here"><br>4.3主动推送<br>安装对应提交插件<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install hexo-baidu-url-submit --save</span><br></pre></td></tr></table></figure></li></ol><p>修改配置：<br></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">##配置插件</span><br><span class="line">plugin:</span><br><span class="line">- hexo-generator-baidu-sitemap</span><br><span class="line">- hexo-generator-sitemap</span><br><span class="line">- hexo-baidu-url-submit</span><br><span class="line"></span><br><span class="line">baidu_url_submit:</span><br><span class="line">  ## 比如3，代表提交最新的三个链接</span><br><span class="line">  count: 3</span><br><span class="line">  # 在百度站长平台中注册的域名</span><br><span class="line">  host: www.liuyong520.cn </span><br><span class="line">  ## 请注意这是您的秘钥， 请不要发布在公众仓库里!</span><br><span class="line">  token: upR0BjzCYxTC2CPq </span><br><span class="line">  ## 文本文档的地址， 新链接会保存在此文本文档里</span><br><span class="line">  path: baidu_urls.txt</span><br></pre></td></tr></table></figure><p></p><p>编译博客<br></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">hexo g</span><br><span class="line">hexo d</span><br></pre></td></tr></table></figure><p></p><p>如果出现下图即表示成功了<br><img src="https://www.github.com/liuyong520/pic/raw/master/小书匠/1556435593425.png" alt="enter description here"></p><p>4.4 自动推送<br>将如下代码添加到head.ejs中即可生效<br></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">&lt;script&gt;</span><br><span class="line">   (function()&#123;</span><br><span class="line">       var bp = document.createElement(&apos;script&apos;);</span><br><span class="line">       var curProtocol = window.location.protocol.split(&apos;:&apos;)[0];</span><br><span class="line">       if (curProtocol === &apos;https&apos;) &#123;</span><br><span class="line">           bp.src = &apos;https://zz.bdstatic.com/linksubmit/push.js&apos;;        </span><br><span class="line">       &#125;</span><br><span class="line">       else &#123;</span><br><span class="line">           bp.src = &apos;http://push.zhanzhang.baidu.com/push.js&apos;;</span><br><span class="line">       &#125;</span><br><span class="line">       var s = document.getElementsByTagName(&quot;script&quot;)[0];</span><br><span class="line">       s.parentNode.insertBefore(bp, s);</span><br><span class="line">   &#125;)();</span><br><span class="line"> &lt;/script&gt;</span><br></pre></td></tr></table></figure><p></p><p>4.5 sitemap 提交方式<br>打开百度站长平台，点击sitemap，填入我们的sitemap文件路径：&lt;域名&gt;/&lt;sitemap名字&gt;如下<br><img src="https://www.github.com/liuyong520/pic/raw/master/小书匠/1556435919259.png" alt="sitemap"><br>提交即可.<br>但是此时你的域名其实并没有被百度站长所收录：<br><img src="https://www.github.com/liuyong520/pic/raw/master/小书匠/1556436053972.png" alt="enter description here"><br>百度依然检索不到你的网站，需要10多个工作日之后才能审核通过。</p><ol start="5"><li><p>绑定站点到熊掌ID，这样熊掌ID站点管理里面就能看到相关站点数据了<br>登录站长平台，注册熊掌ID，提交审核过后<br>点击站点收录：<br><img src="https://www.github.com/liuyong520/pic/raw/master/小书匠/1556436351784.png" alt="enter description here"><br><img src="https://www.github.com/liuyong520/pic/raw/master/小书匠/1556436435701.png" alt="enter description here"></p><h4 id="静态资源压缩"><a href="#静态资源压缩" class="headerlink" title="静态资源压缩"></a>静态资源压缩</h4><p>hexo 的文章是通过md格式的文件经过swig转换成的html，生成的html会有很多空格，而且自己写的js以及css中会有很多的空格和注释。<br>js和java不一样，注释也会影响一部分的性能，空格同样是的。<br>静态资源压缩也有多种手段：有gulp插件和hexo自带的neat插件。</p><h5 id="1-hexo-neat-插件："><a href="#1-hexo-neat-插件：" class="headerlink" title="1.hexo-neat 插件："></a>1.hexo-neat 插件：</h5></li><li><p>安装hexo-neat插件</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install hexo-neat --save</span><br></pre></td></tr></table></figure></li><li><p>修改站点配置文件_config.yml：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"> # hexo-neat</span><br><span class="line"># 博文压缩</span><br><span class="line">neat_enable: true</span><br><span class="line"># 压缩html</span><br><span class="line">neat_html:</span><br><span class="line">  enable: true</span><br><span class="line">  exclude:</span><br><span class="line"># 压缩css  </span><br><span class="line">neat_css:</span><br><span class="line">  enable: true</span><br><span class="line">  exclude:</span><br><span class="line">    - &apos;**/*.min.css&apos;</span><br><span class="line"># 压缩js</span><br><span class="line">neat_js:</span><br><span class="line">  enable: true</span><br><span class="line">  mangle: true</span><br><span class="line">  output:</span><br><span class="line">  compress:</span><br><span class="line">  exclude:</span><br><span class="line">    - &apos;**/*.min.js&apos;</span><br><span class="line">    - &apos;**/jquery.fancybox.pack.js&apos;</span><br><span class="line">    - &apos;**/index.js&apos;</span><br></pre></td></tr></table></figure></li><li><p>编译博客</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">hexo g </span><br><span class="line">hexo d</span><br></pre></td></tr></table></figure><h5 id="gulp插件方式"><a href="#gulp插件方式" class="headerlink" title="gulp插件方式"></a>gulp插件方式</h5></li><li>安装gulp及相关插件<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">npm install gulp -g</span><br><span class="line">npm install gulp-minify-css --save</span><br><span class="line">npm install gulp-uglify --save</span><br><span class="line">npm install gulp-htmlmin --save</span><br><span class="line">npm install gulp-htmlclean --save</span><br><span class="line">npm install gulp-imagemin --save</span><br></pre></td></tr></table></figure></li></ol><p>在 Hexo 站点下新建 gulpfile.js文件，文件内容如下：<br></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><span class="line">var gulp = require(&apos;gulp&apos;);</span><br><span class="line">var minifycss = require(&apos;gulp-minify-css&apos;);</span><br><span class="line">var uglify = require(&apos;gulp-uglify&apos;);</span><br><span class="line">var htmlmin = require(&apos;gulp-htmlmin&apos;);</span><br><span class="line">var htmlclean = require(&apos;gulp-htmlclean&apos;);</span><br><span class="line">var imagemin = require(&apos;gulp-imagemin&apos;);</span><br><span class="line">// 压缩css文件</span><br><span class="line">gulp.task(&apos;minify-css&apos;, function() &#123;</span><br><span class="line">  return gulp.src(&apos;./public/**/*.css&apos;)</span><br><span class="line">  .pipe(minifycss())</span><br><span class="line">  .pipe(gulp.dest(&apos;./public&apos;));</span><br><span class="line">&#125;);</span><br><span class="line">// 压缩html文件</span><br><span class="line">gulp.task(&apos;minify-html&apos;, function() &#123;</span><br><span class="line">  return gulp.src(&apos;./public/**/*.html&apos;)</span><br><span class="line">  .pipe(htmlclean())</span><br><span class="line">  .pipe(htmlmin(&#123;</span><br><span class="line">    removeComments: true,</span><br><span class="line">    minifyJS: true,</span><br><span class="line">    minifyCSS: true,</span><br><span class="line">    minifyURLs: true,</span><br><span class="line">  &#125;))</span><br><span class="line">  .pipe(gulp.dest(&apos;./public&apos;))</span><br><span class="line">&#125;);</span><br><span class="line">// 压缩js文件</span><br><span class="line">gulp.task(&apos;minify-js&apos;, function() &#123;</span><br><span class="line">    return gulp.src([&apos;./public/**/.js&apos;,&apos;!./public/js/**/*min.js&apos;])</span><br><span class="line">        .pipe(uglify())</span><br><span class="line">        .pipe(gulp.dest(&apos;./public&apos;));</span><br><span class="line">&#125;);</span><br><span class="line">// 压缩 public/demo 目录内图片</span><br><span class="line">gulp.task(&apos;minify-images&apos;, function() &#123;</span><br><span class="line">    gulp.src(&apos;./public/demo/**/*.*&apos;)</span><br><span class="line">        .pipe(imagemin(&#123;</span><br><span class="line">           optimizationLevel: 5, //类型：Number  默认：3  取值范围：0-7（优化等级）</span><br><span class="line">           progressive: true, //类型：Boolean 默认：false 无损压缩jpg图片</span><br><span class="line">           interlaced: false, //类型：Boolean 默认：false 隔行扫描gif进行渲染</span><br><span class="line">           multipass: false, //类型：Boolean 默认：false 多次优化svg直到完全优化</span><br><span class="line">        &#125;))</span><br><span class="line">        .pipe(gulp.dest(&apos;./public/uploads&apos;));</span><br><span class="line">&#125;);</span><br><span class="line">// 默认任务</span><br><span class="line">gulp.task(&apos;default&apos;, [</span><br><span class="line">  &apos;minify-html&apos;,&apos;minify-css&apos;,&apos;minify-js&apos;,&apos;minify-images&apos;</span><br><span class="line">]);</span><br></pre></td></tr></table></figure><p></p><p>只需要每次在执行 generate 命令后执行 gulp 就可以实现对静态资源的压缩，压缩完成后执行 deploy 命令同步到服务器：<br></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">hexo g</span><br><span class="line">gulp</span><br><span class="line">hexo d</span><br></pre></td></tr></table></figure><p></p><h4 id="修改访问URL路径"><a href="#修改访问URL路径" class="headerlink" title="修改访问URL路径"></a>修改访问URL路径</h4><p>默认情况下访问URL路径为：domain/2018/10/18/关于本站,修改为 domain/About/关于本站。 编辑 Hexo 站点下的 _config.yml 文件，修改其中的 permalink字段：<br></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">permalink: :category/:title/</span><br></pre></td></tr></table></figure><p></p><h4 id="博文置顶"><a href="#博文置顶" class="headerlink" title="博文置顶"></a>博文置顶</h4><ol><li>安装插件<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">npm uninstall hexo-generator-index --save</span><br><span class="line">npm install hexo-generator-index-pin-top --save</span><br></pre></td></tr></table></figure></li></ol><p>然后在需要置顶的文章的Front-matter中加上top即可：<br></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">--</span><br><span class="line">title: 2018</span><br><span class="line">date: 2018-10-25 16:10:03</span><br><span class="line">top: 10</span><br><span class="line">---</span><br></pre></td></tr></table></figure><p></p><p>设置置顶标志<br>打开：/themes/*/layout/_macro/post.swig，定位到<br></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&#123;% if post.top %&#125;</span><br><span class="line">  &lt;i class=&quot;fa fa-thumb-tack&quot;&gt;&lt;/i&gt;</span><br><span class="line">  &lt;font color=7D26CD&gt;置顶&lt;/font&gt;</span><br><span class="line">  &lt;span class=&quot;post-meta-divider&quot;&gt;|&lt;/span&gt;</span><br><span class="line">&#123;% endif %&#125;</span><br></pre></td></tr></table></figure><p></p><!-- rebuild by neat -->]]></content>
    
    <summary type="html">
    
      
      
        &lt;!-- build time:Fri May 03 2019 21:23:31 GMT+0800 (GMT+08:00) --&gt;&lt;p&gt;在介绍博客主题优化这个话题之前，我想先介绍hexo主题的大体结构，便于后面将主题优化方面的东西。&lt;/p&gt;&lt;h2 id=&quot;hexo主题结构&quot;&gt;&lt;a
      
    
    </summary>
    
      <category term="hexo" scheme="http://www.liuyong520.cn/categories/hexo/"/>
    
    
      <category term="hexo" scheme="http://www.liuyong520.cn/tags/hexo/"/>
    
  </entry>
  
  <entry>
    <title>Hexo之环境搭建</title>
    <link href="http://www.liuyong520.cn/2017/08/27/hexo-install/"/>
    <id>http://www.liuyong520.cn/2017/08/27/hexo-install/</id>
    <published>2017-08-27T02:56:51.000Z</published>
    <updated>2019-04-27T12:11:10.273Z</updated>
    
    <content type="html"><![CDATA[<!-- build time:Fri May 03 2019 21:23:30 GMT+0800 (GMT+08:00) --><p>如果你和我一样是小白，那么恭喜你！看完这篇文章，你也可以拥有一个这样的博客啦！</p><h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>在以前我们要维护一个专属于自己的blog，是比较麻烦的，要购买服务器，部署博客程序到服务器，还要维护相关数据和网络。这一类blog最为典型的例子就是WordPress。而今天我们要介绍的是如何基于Hexo博客快速的搭建我们自己服务器系列。</p><h2 id="hexo介绍"><a href="#hexo介绍" class="headerlink" title="hexo介绍"></a>hexo介绍</h2><p>Hexo 是一个快速、简洁且高效的博客框架。Hexo 使用 Markdown（或其他渲染引擎）解析文章，在几秒内，即可利用靓丽的主题生成静态网页。</p><h2 id="hexo安装"><a href="#hexo安装" class="headerlink" title="hexo安装"></a>hexo安装</h2><p>hexo 是基于node.js环境的，所以安装前，您必须检查电脑中是否已安装下列应用程序：<a href="https://nodejs.org/en/" target="_blank" rel="noopener">node.js</a><br>如果您的电脑中已经安装上述必备程序，那么恭喜您！接下来只需要使用 npm 即可完成 Hexo 的安装。<br></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ npm install -g hexo-cli</span><br></pre></td></tr></table></figure><p></p><p>如果您的电脑中未安装Node，那么就需要安装Node.js<br>详细安装步骤参考：<a href="http://www.liuyong520.cn/2017/08/26/nodejs-install/">http://www.liuyong520.cn/2017/08/26/nodejs-install/</a></p><p>再安装Hexo，在命令行（即Git Bash）运行以下命令：<br></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install -g hexo-cli</span><br></pre></td></tr></table></figure><p></p><p>至此Hexo的环境就搭建好了，下一步验证一下hexo<br></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">MacBook-Pro:_posts xxydliuyss$ hexo version</span><br><span class="line">hexo: 3.8.0</span><br><span class="line">hexo-cli: 1.1.0</span><br><span class="line">os: Darwin 18.5.0 darwin x64</span><br><span class="line">http_parser: 2.8.0</span><br><span class="line">node: 10.15.3</span><br><span class="line">v8: 6.8.275.32-node.51</span><br><span class="line">uv: 1.23.2</span><br><span class="line">zlib: 1.2.11</span><br><span class="line">ares: 1.15.0</span><br><span class="line">modules: 64</span><br><span class="line">nghttp2: 1.34.0</span><br><span class="line">napi: 3</span><br><span class="line">openssl: 1.1.0j</span><br><span class="line">icu: 62.1</span><br><span class="line">unicode: 11.0</span><br><span class="line">cldr: 33.1</span><br><span class="line">tz: 2018e</span><br></pre></td></tr></table></figure><p></p><p>这样hexo就安装完成了</p><h3 id="hexo命令介绍"><a href="#hexo命令介绍" class="headerlink" title="hexo命令介绍"></a>hexo命令介绍</h3><p>官网已经介绍的比较详细了这里就不再赘述了<br>详情请看官方命令地址：<a href="https://hexo.io/zh-cn/docs/commands" target="_blank" rel="noopener">https://hexo.io/zh-cn/docs/commands</a></p><h3 id="hexo快速新建博客"><a href="#hexo快速新建博客" class="headerlink" title="hexo快速新建博客"></a>hexo快速新建博客</h3><p>初始化Hexo，在命令行（即Git Bash）依次运行以下命令即可：</p><p>以下，即存放Hexo初始化文件的路径， 即站点目录。<br></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">$ hexo init myproject</span><br><span class="line">$ cd myproject</span><br><span class="line">$ npm install</span><br></pre></td></tr></table></figure><p></p><p>新建完成后，在路径下，会产生这些文件和文件夹：<br></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">$ tree</span><br><span class="line">.</span><br><span class="line">├── _config.yml</span><br><span class="line">├── package.json</span><br><span class="line">├── scaffolds</span><br><span class="line">├── source</span><br><span class="line">|   ├── _drafts</span><br><span class="line">|   └── _posts</span><br><span class="line">└── themes</span><br></pre></td></tr></table></figure><p></p><table><thead><tr><th>目录名或者文件名</th><th>详情介绍</th></tr></thead><tbody><tr><td>_config.yml</td><td>hexo 全局配置文件</td></tr><tr><td>package.json</td><td>nodejs 包配置文件</td></tr><tr><td>scaffolds</td><td>hexo模版文件夹hexo new filename 会对应根据模版文件生成文件</td></tr><tr><td>source</td><td>项目源代码文件目录</td></tr><tr><td>_drafts</td><td>为草稿原文件目录</td></tr><tr><td>_posts</td><td>项目发布文件目录 项目最终会根据这个目录下的文件生成html</td></tr><tr><td>themes</td><td>博客主题存放目录</td></tr></tbody></table><p>注：</p><p>hexo相关命令均在站点目录下，用Git Bash运行。</p><p>站点配置文件：站点目录下的_config.yml。</p><p>​ 路径为<folder>_config.yml</folder></p><p>主题配置文件：站点目录下的themes文件夹下的，主题文件夹下的_config.yml。</p><p>​ 路径为<folder>\themes\&lt;主题文件夹&gt;_config.yml</folder></p><ol start="2"><li>启动服务器。在路径下，命令行（即Git Bash）输入以下命令，运行即可：</li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hexo server</span><br></pre></td></tr></table></figure><ol start="3"><li>浏览器访问网址： <a href="http://localhost:4000/" target="_blank" rel="noopener">http://localhost:4000/</a> 就可以预览博客了<br><img src="https://www.github.com/liuyong520/pic/raw/master/小书匠/1556363959958.png" alt="图片"></li></ol><p>下一篇 我将介绍如何搭建自己的blog</p><!-- rebuild by neat -->]]></content>
    
    <summary type="html">
    
      
      
        &lt;!-- build time:Fri May 03 2019 21:23:30 GMT+0800 (GMT+08:00) --&gt;&lt;p&gt;如果你和我一样是小白，那么恭喜你！看完这篇文章，你也可以拥有一个这样的博客啦！&lt;/p&gt;&lt;h2 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; cla
      
    
    </summary>
    
      <category term="hexo" scheme="http://www.liuyong520.cn/categories/hexo/"/>
    
    
      <category term="hexo" scheme="http://www.liuyong520.cn/tags/hexo/"/>
    
  </entry>
  
  <entry>
    <title>利用hexo搭建博客</title>
    <link href="http://www.liuyong520.cn/2017/08/27/creatblog/"/>
    <id>http://www.liuyong520.cn/2017/08/27/creatblog/</id>
    <published>2017-08-27T02:56:51.000Z</published>
    <updated>2019-04-27T16:22:09.846Z</updated>
    
    <content type="html"><![CDATA[<!-- build time:Fri May 03 2019 21:23:30 GMT+0800 (GMT+08:00) --><p>如果你和我一样是小白，那么恭喜你！看完这篇文章，你也可以拥有一个这样的博客</p><hr><p>前面已经介绍过如何搭建hexo环境，现在我将介绍如何用hexo搭建自己的blog</p><h2 id="博客搭建"><a href="#博客搭建" class="headerlink" title="博客搭建"></a>博客搭建</h2><h3 id="实施方案"><a href="#实施方案" class="headerlink" title="实施方案"></a>实施方案</h3><h4 id="方案一：GithubPages"><a href="#方案一：GithubPages" class="headerlink" title="方案一：GithubPages"></a>方案一：GithubPages</h4><ol><li><p>创建Github账号</p></li><li><p>创建仓库 ，仓库名为：&lt;Github账号名称&gt;.github.io<br><img src="https://www.github.com/liuyong520/pic/raw/master/小书匠/1556370583717.png" alt="仓库名称"><br>点击settings<br><img src="https://www.github.com/liuyong520/pic/raw/master/小书匠/1556370714512.png" alt="settings"><br>往下翻就能看到githubPages，我这里是已经配置过了的，没有配置可以是select themes ，点击能够选择SkyII主题。（SkyII主题也是和hexo类似的blog的框架，这里不与介绍）</p></li><li><p>将本地Hexo博客推送到GithubPages<br>3.1. 安装hexo-deployer-git插件。在命令行（即Git Bash）运行以下命令即可：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ npm install hexo-deployer-git --save</span><br></pre></td></tr></table></figure><p>3.2. 添加SSH key。</p><ul><li><p>创建一个 SSH key 。在命令行（即Git Bash）输入以下命令， 回车三下即可：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ ssh-keygen -t rsa -C &quot;邮箱地址&quot;</span><br></pre></td></tr></table></figure></li><li><p>添加到 github。 复制密钥文件内容（路径形如C:\Users\Administrator.ssh\id_rsa.pub），粘贴到New SSH Key即可。</p></li><li><p>测试是否添加成功。在命令行（即Git Bash）依次输入以下命令，返回“You’ve successfully authenticated”即成功：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ssh -T git@github.com</span><br></pre></td></tr></table></figure><p>3.3. 修改_config.yml（在站点目录下）。文件末尾修改为：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"># Deployment</span><br><span class="line">## Docs: https://hexo.io/docs/deployment.html</span><br><span class="line">deploy:</span><br><span class="line">  type: git</span><br><span class="line">  repo: git@github.com:&lt;Github账号名称&gt;/&lt;Github账号名称&gt;.github.io.git</span><br><span class="line">  branch: master</span><br></pre></td></tr></table></figure><p>注意：上面仓库地址写ssh地址，不写http地址。<br>3.4. 推送到GithubPages。在命令行（即Git Bash）依次输入以下命令， 返回INFO Deploy done: git即成功推送：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ hexo g</span><br><span class="line">$ hexo d</span><br></pre></td></tr></table></figure><p>等待1分钟左右，浏览器访问网址： https://&lt;Github账号名称&gt;.github.io<br>至此，您的Hexo博客已经搭建在GithubPages, 域名为https://&lt;Github账号名称&gt;.github.io。</p></li></ul></li></ol><h4 id="方案二：GithubPages-域名"><a href="#方案二：GithubPages-域名" class="headerlink" title="方案二：GithubPages + 域名"></a>方案二：GithubPages + 域名</h4><p>在方案一的基础上，添加自定义域名（您购买的域名）。我的是从阿里云购买的。</p><ol><li><p>域名解析<br>类型选择为 CNAME；</p><p>主机记录即域名前缀，填写为www；</p><p>记录值填写为&lt;Github账号名称&gt;.github.io；</p><p>解析线路，TTL 默认即可<br><img src="https://www.github.com/liuyong520/pic/raw/master/小书匠/屏幕快照_2019-04-27_21.28.51.png" alt="阿里云"><br>点击 liuyong520.cn<br><img src="https://www.github.com/liuyong520/pic/raw/master/小书匠/1556371873729.png" alt="域名解析"></p></li><li><p>仓库设置。<br>2.1. 打开博客仓库设置：<a href="https://github.com/" target="_blank" rel="noopener">https://github.com/</a>&lt;Github账号名称&gt;/&lt;Github账号名称&gt;.github.io/settings</p><p>2.2. 在Custom domain下，填写自定义域名，点击save。</p><p>2.3. 在站点目录的source文件夹下，创建并打开CNAME.txt，写入你的域名（如<a href="http://www.liuyong520.cn），保存，并重命名为CNAME。如图" target="_blank" rel="noopener">www.liuyong520.cn），保存，并重命名为CNAME。如图</a><br><img src="https://www.github.com/liuyong520/pic/raw/master/小书匠/1556370801480.png" alt="githubpages"></p><ol start="3"><li><p>等待10分钟左右。<br>浏览器访问自定义域名。<a href="http://www.liuyong520.cn">http://www.liuyong520.cn</a></p><p>至此，您的Hexo博客已经解析到自定义域名，https://&lt;Github账号名称&gt;.github.io依然可用。</p></li></ol><h4 id="方案三：GithubPages-CodingPages-域名"><a href="#方案三：GithubPages-CodingPages-域名" class="headerlink" title="方案三：GithubPages + CodingPages + 域名"></a>方案三：GithubPages + CodingPages + 域名</h4></li></ol><p>GithubPages 在国内较慢，百度不收录，而CodingPages 在国外较快。所以在方案二的基础上，添加CodingPages 。</p><ol><li>创建Coding账号</li><li>创建仓库， 仓库名为：&lt;Coding账号名称&gt;</li><li>进入项目里『代码』页面，点击『一键开启静态 Pages』，稍等片刻CodingPages即可部署成功。<br><img src="https://www.github.com/liuyong520/pic/raw/master/小书匠/1556380352090.png" alt="enter description here"></li><li><p>将本地Hexo博客推送到CodingPages<br>4.1. 鉴于创建GithubPages 时，已经生成过公钥。可直接复制密钥文件内容（路径形如C:\Users\Administrator.ssh\id_rsa.pub）， 粘贴到新增公钥。<br>4.2. 测试是否添加成功。在命令行（即Git Bash）依次输入以下命令，返回“You’ve successfully authenticated”即成功：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ ssh -T git@git.coding.net</span><br><span class="line">$ yes</span><br></pre></td></tr></table></figure><p>4.3. 修改_config.yml（在存放Hexo初始化文件的路径下）。文件末尾修改为：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"># Deployment</span><br><span class="line">## Docs: https://hexo.io/docs/deployment.html</span><br><span class="line">deploy:</span><br><span class="line">- type: git</span><br><span class="line">  repo: git@github.com:&lt;Github账号名称&gt;/&lt;Github账号名称&gt;.github.io.git</span><br><span class="line">  branch: master</span><br><span class="line">- type: git</span><br><span class="line">  repo: git@git.dev.tencent.com:&lt;Coding账号名称&gt;/&lt;Coding账号名称&gt;.git</span><br><span class="line"> branch: master</span><br></pre></td></tr></table></figure><p>4.4. 推送到GithubPages。在命令行（即Git Bash）依次输入以下命令， 返回INFO Deploy done: git即成功推送：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ hexo g</span><br><span class="line">$ hexo d</span><br></pre></td></tr></table></figure></li><li><p>域名解析</p><ol><li><p>添加 CNAME 记录指向 &lt;Coding账号名称&gt;.coding.me</p><p>类型选择为 CNAME；</p><p>主机记录即域名前缀，填写为www；</p><p>记录值填写为&lt;Github账号名称&gt;.coding.me；</p><p>解析线路，TTL 默认即可。</p></li><li><p>添加 两条A 记录指向 192.30.252.153和192.30.252.154</p><p>类型选择为 A；</p><p>主机记录即域名前缀，填写为@；</p><p>记录值填写为192.30.252.153和192.30.252.154；</p><p>解析线路，境外或谷歌。<br><img src="https://www.github.com/liuyong520/pic/raw/master/小书匠/1556382087569.png" alt="enter description here"></p><ol start="3"><li>在『Pages 服务』设置页（<a href="https://dev.tencent.com/u/" target="_blank" rel="noopener">https://dev.tencent.com/u/</a>&lt;Coding账号名称&gt;/p/&lt;Coding账号名称&gt;/git/pages/settings）中绑定自定义域名<br><img src="https://www.github.com/liuyong520/pic/raw/master/小书匠/1556382059000.png" alt="enter description here"></li><li>至此，您的Hexo博客已经解析到自定义域名，https://&lt;Github账号名称&gt;.github.io和https://&lt;Coding账号名称&gt;.coding.me依然可用。</li></ol></li></ol></li></ol><h4 id="切换主题"><a href="#切换主题" class="headerlink" title="切换主题"></a>切换主题</h4><ul><li><p>选择主题<br>hexo主题是非常多的，默认的主题是landscape，您可以自主的在hexo官方网站上挑选自己喜欢的主题，网站：<a href="https://hexo.io/themes/" target="_blank" rel="noopener">https://hexo.io/themes/</a><br>推荐以下主题：<br><a href="https://github.com/shenliyang/hexo-theme-snippet#hexo-theme-snippet" target="_blank" rel="noopener">snippet</a><br><a href="https://github.com/iTimeTraveler/hexo-theme-hiero#hiero" target="_blank" rel="noopener">Hiero</a><br><a href="https://github.com/tangkunyin/hexo-theme-jsimple#jsimple" target="_blank" rel="noopener">Jsimple</a><br><a href="https://github.com/chaooo/hexo-theme-BlueLake#bluelake" target="_blank" rel="noopener">BlueLake</a><br><a href="https://github.com/cofess/hexo-theme-pure" target="_blank" rel="noopener">Pure</a><br><a href="https://github.com/theme-next/hexo-theme-next" target="_blank" rel="noopener">Next</a><br><a href="https://github.com/ppoffice/hexo-theme-hueman" target="_blank" rel="noopener">Hueman</a><br>我这里选择的是Pure。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git clone https://github.com/cofess/hexo-theme-pure.git  themes/pure</span><br></pre></td></tr></table></figure><p>此时会在themes 目录下生成 pure目录<br><img src="https://www.github.com/liuyong520/pic/raw/master/小书匠/1556365705175.png" alt="目录"></p></li><li><p>应用主题<br>更改站点配置_config.yml 修改成</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"># Extensions</span><br><span class="line">## Plugins: https://hexo.io/plugins/</span><br><span class="line">## Themes: https://hexo.io/themes/</span><br><span class="line">theme: &lt;主题文件夹的名称&gt;</span><br></pre></td></tr></table></figure></li><li><p>主题优化<br>以上主题都有比较详细的说明文档，本节主要解决主题优化的常见问题。</p><p>主题优化一般包括：</p><ul><li>设置「RSS」</li><li>添加「标签」页面</li><li>添加「分类」页面</li><li>设置「字体」</li><li>设置「代码高亮主题」</li><li>侧边栏社交链接</li><li>开启打赏功能</li><li>设置友情链接</li><li>腾讯公益404页面</li><li>站点建立时间</li><li>订阅微信公众号</li><li>设置「动画效果」</li><li>设置「背景动画」<br>下一次我将针对Pure进行主题方面的相关配置，以及讲解一下hexo主题的的实现原理的。这样你们针对不同的主题也就都能配置了。</li></ul></li></ul><!-- rebuild by neat -->]]></content>
    
    <summary type="html">
    
      
      
        &lt;!-- build time:Fri May 03 2019 21:23:30 GMT+0800 (GMT+08:00) --&gt;&lt;p&gt;如果你和我一样是小白，那么恭喜你！看完这篇文章，你也可以拥有一个这样的博客&lt;/p&gt;&lt;hr&gt;&lt;p&gt;前面已经介绍过如何搭建hexo环境，现在我将介绍
      
    
    </summary>
    
      <category term="hexo" scheme="http://www.liuyong520.cn/categories/hexo/"/>
    
    
      <category term="hexo" scheme="http://www.liuyong520.cn/tags/hexo/"/>
    
  </entry>
  
  <entry>
    <title>node.js环境搭建</title>
    <link href="http://www.liuyong520.cn/2017/08/26/nodejs-install/"/>
    <id>http://www.liuyong520.cn/2017/08/26/nodejs-install/</id>
    <published>2017-08-26T01:56:51.000Z</published>
    <updated>2019-04-27T09:42:47.606Z</updated>
    
    <content type="html"><![CDATA[<!-- build time:Fri May 03 2019 21:23:30 GMT+0800 (GMT+08:00) --><h2 id="安装node-js"><a href="#安装node-js" class="headerlink" title="安装node.js"></a>安装node.js</h2><p>登录<img src="https://nodejs.org/en/" alt="node.js">官网下载对应的exe安装包。下载地址为：<img src="https://nodejs.org/en/download/" alt="https://nodejs.org/en/download/"><br><img src="https://www.github.com/liuyong520/pic/raw/master/小书匠/1556354057260.png" alt="nodejs下载页面"><br>你可以根据不同平台系统选择你需要的Node.js安装包。</p><p>Node.js 历史版本下载地址：<a href="https://nodejs.org/dist/" target="_blank" rel="noopener">https://nodejs.org/dist/</a></p><p>注意：Linux上安装Node.js需要安装Python 2.6 或 2.7 ，不建议安装Python 3.0以上版本。</p><hr><h3 id="windows-上安装-node-js"><a href="#windows-上安装-node-js" class="headerlink" title="windows 上安装 node.js"></a>windows 上安装 node.js</h3><p>你可以采用以下两种方式来安装。</p><p>1、Windows 安装包(.msi)<br>32 位安装包下载地址 : <a href="https://nodejs.org/dist/v4.4.3/node-v4.4.3-x86.msi" target="_blank" rel="noopener">https://nodejs.org/dist/v4.4.3/node-v4.4.3-x86.msi</a></p><p>64 位安装包下载地址 : <a href="https://nodejs.org/dist/v4.4.3/node-v4.4.3-x64.msi" target="_blank" rel="noopener">https://nodejs.org/dist/v4.4.3/node-v4.4.3-x64.msi</a></p><p>本文实例以 v0.10.26 版本为例，其他版本类似， 安装步骤：</p><p>步骤 1 : 双击下载后的安装包 v0.10.26，如下所示：<br><img src="https://www.github.com/liuyong520/pic/raw/master/小书匠/1556356341458.png" alt="安装图"><br>步骤 2: 点击以上的Run(运行)，将出现如下界面：<br><img src="https://www.github.com/liuyong520/pic/raw/master/小书匠/1556356418282.png" alt="安装图"><br>步骤 3 : 勾选接受协议选项，点击 next（下一步） 按钮 :<br><img src="https://www.github.com/liuyong520/pic/raw/master/小书匠/1556356471486.png" alt="enter description here"><br>步骤 4 : Node.js默认安装目录为 “C:\Program Files\nodejs\” , 你可以修改目录，并点击 next（下一步）：<br><img src="https://www.github.com/liuyong520/pic/raw/master/小书匠/1556356504568.png" alt="enter description here"><br>步骤 5 : 点击树形图标来选择你需要的安装模式 , 然后点击下一步 next（下一步）<br><img src="https://www.github.com/liuyong520/pic/raw/master/小书匠/1556356545218.png" alt="enter description here"><br>步骤 6 :点击 Install（安装） 开始安装Node.js。你也可以点击 Back（返回）来修改先前的配置。 然后并点击 next（下一步）：<br><img src="https://www.github.com/liuyong520/pic/raw/master/小书匠/1556356578858.png" alt="enter description here"><br>点击 Finish（完成）按钮退出安装向导。<br><img src="https://www.github.com/liuyong520/pic/raw/master/小书匠/1556356605083.png" alt="完成图"><br>检测PATH环境变量是否配置了Node.js，点击开始=》运行=》输入”cmd” =&gt; 输入命令”path”，输出如下结果：<br></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">PATH=C:\oraclexe\app\oracle\product\10.2.0\server\bin;C:\Windows\system32;</span><br><span class="line">C:\Windows;C:\Windows\System32\Wbem;C:\Windows\System32\WindowsPowerShell\v1.0\;</span><br><span class="line">c:\python32\python;C:\MinGW\bin;C:\Program Files\GTK2-Runtime\lib;</span><br><span class="line">C:\Program Files\MySQL\MySQL Server 5.5\bin;C:\Program Files\nodejs\;</span><br><span class="line">C:\Users\rg\AppData\Roaming\npm</span><br></pre></td></tr></table></figure><p></p><p>我们可以看到环境变量中已经包含了C:\Program Files\nodejs\</p><p>检查Node.js版本<br></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">E:\&gt; node --version</span><br><span class="line">v0.10.26</span><br></pre></td></tr></table></figure><p></p><p>2、Windows 二进制文件 (.exe)安装<br>32 位安装包下载地址 : <a href="http://nodejs.org/dist/v0.10.26/node.exe" target="_blank" rel="noopener">http://nodejs.org/dist/v0.10.26/node.exe</a></p><p>64 位安装包下载地址 : <a href="http://nodejs.org/dist/v0.10.26/x64/node.exe" target="_blank" rel="noopener">http://nodejs.org/dist/v0.10.26/x64/node.exe</a><br>安装步骤</p><p>步骤 1 : 双击下载的安装包 Node.exe ，将出现如下界面 :<br><img src="https://www.github.com/liuyong520/pic/raw/master/小书匠/1556356900243.png" alt="enter description here"><br>点击 Run（运行）按钮将出现命令行窗口：<br><img src="https://www.github.com/liuyong520/pic/raw/master/小书匠/1556356930002.png" alt="enter description here"><br>版本测试<br>进入 node.exe 所在的目录，如下所示<br><img src="https://www.github.com/liuyong520/pic/raw/master/小书匠/1556356957166.png" alt="enter description here"><br>如果你获得以上输出结果，说明你已经成功安装了Node.js。</p><h3 id="linux安装node-js"><a href="#linux安装node-js" class="headerlink" title="linux安装node.js"></a>linux安装node.js</h3><p>直接使用已编译好的包<br>Node 官网已经把 linux 下载版本更改为已编译好的版本了，我们可以直接下载解压后使用：<br></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"># wget https://nodejs.org/dist/v10.9.0/node-v10.9.0-linux-x64.tar.xz    // 下载</span><br><span class="line"># tar xf  node-v10.9.0-linux-x64.tar.xz       // 解压</span><br><span class="line"># cd node-v10.9.0-linux-x64/                  // 进入解压目录</span><br><span class="line"># ./bin/node -v                               // 执行node命令 查看版本</span><br><span class="line">v10.9.0</span><br></pre></td></tr></table></figure><p></p><p>解压文件的 bin 目录底下包含了 node、npm 等命令，我们可以使用 ln 命令来设置软连接<br></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">ln -s /usr/software/nodejs/bin/npm   /usr/local/bin/ </span><br><span class="line">ln -s /usr/software/nodejs/bin/node   /usr/local/bin/</span><br></pre></td></tr></table></figure><p></p><p>Ubuntu 源码安装 Node.js<br>以下部分我们将介绍在 Ubuntu Linux 下使用源码安装 Node.js 。 其他的 Linux 系统，如 Centos 等类似如下安装步骤。</p><p>在 Github 上获取 Node.js 源码：<br></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ sudo git clone https://github.com/nodejs/node.git</span><br><span class="line">Cloning into &apos;node&apos;...</span><br></pre></td></tr></table></figure><p></p><p>修改目录权限：<br></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ sudo chmod -R 755 node</span><br></pre></td></tr></table></figure><p></p><p>使用 ./configure 创建编译文件，并按照：<br></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">$ cd node</span><br><span class="line">$ sudo ./configure</span><br><span class="line">$ sudo make</span><br><span class="line">$ sudo make install</span><br></pre></td></tr></table></figure><p></p><p>查看 node 版本：<br></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ node --version</span><br><span class="line">v0.10.25</span><br></pre></td></tr></table></figure><p></p><p>Ubuntu apt-get命令安装<br>命令格式如下：<br></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">sudo apt-get install nodejs</span><br><span class="line">sudo apt-get install npm</span><br></pre></td></tr></table></figure><p></p><p>CentOS 下源码安装 Node.js<br>1、下载源码，你需要在<a href="https://nodejs.org/en/download/" target="_blank" rel="noopener">https://nodejs.org/en/download/</a> 下载最新的Nodejs版本，本文以v0.10.24为例:<br></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">cd /usr/local/src/</span><br><span class="line">wget http://nodejs.org/dist/v0.10.24/node-v0.10.24.tar.gz</span><br></pre></td></tr></table></figure><p></p><p>2、解压源码<br></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">tar zxvf node-v0.10.24.tar.gz</span><br></pre></td></tr></table></figure><p></p><p>3、 编译安装<br></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">cd node-v0.10.24</span><br><span class="line">./configure --prefix=/usr/local/node/0.10.24</span><br><span class="line">make</span><br><span class="line">make install</span><br></pre></td></tr></table></figure><p></p><p>4、 配置NODE_HOME，进入profile编辑环境变量<br></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">vim /etc/profile</span><br></pre></td></tr></table></figure><p></p><p>设置nodejs环境变量，在 <em>export PATH USER LOGNAME MAIL HOSTNAME HISTSIZE HISTCONTROL</em> 一行的上面添加如下内容:<br></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">#set for nodejs</span><br><span class="line">export NODE_HOME=/usr/local/node/0.10.24</span><br><span class="line">export PATH=$NODE_HOME/bin:$PATH</span><br></pre></td></tr></table></figure><p></p><p>:wq保存并退出，编译/etc/profile 使配置生效<br></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">source /etc/profile</span><br></pre></td></tr></table></figure><p></p><p>验证是否安装配置成功<br></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">node -v</span><br></pre></td></tr></table></figure><p></p><p>输出 v0.10.24 表示配置成功<br>npm模块安装路径:<br></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">/usr/local/node/0.10.24/lib/node_modules/</span><br></pre></td></tr></table></figure><p></p><p>注：Nodejs 官网提供了编译好的Linux二进制包，你也可以下载下来直接应用。</p><h3 id="Mac-OS-上安装"><a href="#Mac-OS-上安装" class="headerlink" title="Mac OS 上安装"></a>Mac OS 上安装</h3><p>你可以通过以下两种方式在 Mac OS 上来安装 node：</p><p>1、在官方下载网站</p><p>下载 pkg 安装包，直接点击安装即可。<br>2、使用 brew 命令来安装：<br></p><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">brew install node</span><br></pre></td></tr></table></figure><p></p><!-- rebuild by neat -->]]></content>
    
    <summary type="html">
    
      
      
        &lt;!-- build time:Fri May 03 2019 21:23:30 GMT+0800 (GMT+08:00) --&gt;&lt;h2 id=&quot;安装node-js&quot;&gt;&lt;a href=&quot;#安装node-js&quot; class=&quot;headerlink&quot; title=&quot;安装node.js
      
    
    </summary>
    
      <category term="node" scheme="http://www.liuyong520.cn/categories/node/"/>
    
    
      <category term="node" scheme="http://www.liuyong520.cn/tags/node/"/>
    
  </entry>
  
  <entry>
    <title>xsync 同步命令脚本和xcall远程执行命令脚本</title>
    <link href="http://www.liuyong520.cn/2017/03/29/xsync/"/>
    <id>http://www.liuyong520.cn/2017/03/29/xsync/</id>
    <published>2017-03-28T16:18:32.000Z</published>
    <updated>2019-04-28T16:40:15.580Z</updated>
    
    <content type="html"><![CDATA[<!-- build time:Fri May 03 2019 21:23:30 GMT+0800 (GMT+08:00) --><h2 id="缘由"><a href="#缘由" class="headerlink" title="缘由"></a>缘由</h2><p>在linux服务器集群上，有时我们需要将数据从主服务器同步到所有的从服务器上，或者在集群里需要执行一条或者多条命令，如果们一次次的拷贝，或者每个服务器一条条的执行，会造成重复的工作。所以就写两个脚本解决这方面的问题。</p><h2 id="xsync命令的编写"><a href="#xsync命令的编写" class="headerlink" title="xsync命令的编写"></a>xsync命令的编写</h2><ol><li><p>安装 sync命令</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">yum install -y sync</span><br></pre></td></tr></table></figure></li><li><p>编写脚本 environment.sh</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">#! /usr/bin/bash</span><br><span class="line"># 集群 IP 数组</span><br><span class="line">export NODE_IPS=(172.16.18.198 172.16.18.199 172.16.18.200)</span><br><span class="line"># 集群各 IP 对应的 主机名数组</span><br><span class="line">export NODE_NAMES=(k8s-n1 k8s-n2 k8s-n3)</span><br></pre></td></tr></table></figure></li><li><p>编写xsyncj考本</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><span class="line">#!/bin/bash</span><br><span class="line"></span><br><span class="line"># 获取输出参数，如果没有参数则直接返回</span><br><span class="line">pcount=$#</span><br><span class="line">if [ $pcount -eq 0 ]</span><br><span class="line">then</span><br><span class="line">    echo &quot;no parameter find !&quot;;</span><br><span class="line">    exit;</span><br><span class="line">fi</span><br><span class="line"></span><br><span class="line"># 获取传输文件名</span><br><span class="line">p1=$1</span><br><span class="line">filename=`basename $p1`</span><br><span class="line">echo &quot;load file $p1 success !&quot;</span><br><span class="line"></span><br><span class="line"># 获取文件的绝对路径</span><br><span class="line">pdir=`cd -P $(dirname $p1); pwd`</span><br><span class="line">echo &quot;file path is $pdir&quot;</span><br><span class="line"></span><br><span class="line"># 获取当前用户（如果想使用root用户权限拷贝文件，在命令后加入-root参数即可）</span><br><span class="line">user=$2</span><br><span class="line">case &quot;$user&quot; in</span><br><span class="line">&quot;-root&quot;)</span><br><span class="line">    user=&quot;root&quot;;;</span><br><span class="line">&quot;&quot;)</span><br><span class="line">    user=`whoami`;;</span><br><span class="line">*)</span><br><span class="line">    echo &quot;illegal parameter $user&quot;</span><br><span class="line">    </span><br><span class="line">esac</span><br><span class="line"></span><br><span class="line">echo $user</span><br><span class="line"># 拷贝文件到从机(这里注意主机的host需要根据你的实际情况配置，要与你具体的主机名对应)</span><br><span class="line">source /opt/user/environment.sh</span><br><span class="line">index=0</span><br><span class="line">for node_ip in $&#123;NODE_IPS[@]&#125;</span><br><span class="line">do </span><br><span class="line">    </span><br><span class="line">    echo &quot;================current host is $&#123;NODE_NAMES[$index]&#125; ip is $&#123;node_ip&#125;=================&quot;</span><br><span class="line">    rsync -rvl $pdir/$filename $user@$&#123;node_ip&#125;:$pdir</span><br><span class="line">    index=`expr $index + 1`</span><br><span class="line">done</span><br><span class="line"></span><br><span class="line">echo &quot;complete !&quot;</span><br></pre></td></tr></table></figure></li></ol><h2 id="xcall脚本的编写"><a href="#xcall脚本的编写" class="headerlink" title="xcall脚本的编写"></a>xcall脚本的编写</h2><p>利用ssh命令远程执行脚本命令。<br>脚本如下：<br></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line">#!/bin/bash</span><br><span class="line"></span><br><span class="line"># 获取控制台指令</span><br><span class="line"></span><br><span class="line">cmd=$*</span><br><span class="line"></span><br><span class="line"># 判断指令是否为空</span><br><span class="line">if (( #$cmd -eq # ))</span><br><span class="line">then</span><br><span class="line">    echo &quot;command can not be null !&quot;</span><br><span class="line">    exit</span><br><span class="line">fi</span><br><span class="line"></span><br><span class="line"># 获取当前登录用户</span><br><span class="line">user=`whoami`</span><br><span class="line">source /opt/user/environment.sh</span><br><span class="line"># 在从机执行指令,这里需要根据你具体的集群情况配置，host与具体主机名一致</span><br><span class="line">for node_ip in $&#123;NODE_IPS[@]&#125;</span><br><span class="line">do</span><br><span class="line">        echo &quot;================current host is $&#123;node_ip&#125;=================&quot;</span><br><span class="line">        echo &quot;--&gt; excute command \&quot;$cmd\&quot;&quot;</span><br><span class="line">        ssh $user@$&#123;node_ip&#125; $cmd</span><br><span class="line">done</span><br><span class="line"></span><br><span class="line">echo &quot;excute successfully !&quot;</span><br></pre></td></tr></table></figure><p></p><p>这两个脚本仅仅只是一个简单的脚本，欢迎大家修改和使用。</p><!-- rebuild by neat -->]]></content>
    
    <summary type="html">
    
      
      
        &lt;!-- build time:Fri May 03 2019 21:23:30 GMT+0800 (GMT+08:00) --&gt;&lt;h2 id=&quot;缘由&quot;&gt;&lt;a href=&quot;#缘由&quot; class=&quot;headerlink&quot; title=&quot;缘由&quot;&gt;&lt;/a&gt;缘由&lt;/h2&gt;&lt;p&gt;在linu
      
    
    </summary>
    
      <category term="linux shell" scheme="http://www.liuyong520.cn/categories/linux-shell/"/>
    
    
      <category term="linux" scheme="http://www.liuyong520.cn/tags/linux/"/>
    
      <category term="shell" scheme="http://www.liuyong520.cn/tags/shell/"/>
    
  </entry>
  
</feed>
